/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TippingInterface extends ethers.utils.Interface {
  functions: {
    "EAS_SCHEMA()": FunctionFragment;
    "FALLBACK_DECIMALS()": FunctionFragment;
    "FALLBACK_PRICE()": FunctionFragment;
    "FEE_TYPE_MAPPING(uint8)": FunctionFragment;
    "MINIMAL_PAYMENT_FEE()": FunctionFragment;
    "MINIMAL_PAYMENT_FEE_DENOMINATOR()": FunctionFragment;
    "NATIVE_USD_STALE_THRESHOLD()": FunctionFragment;
    "NATIVE_WEI_MULTIPLIER()": FunctionFragment;
    "PAYMENT_FEE_PERCENTAGE()": FunctionFragment;
    "PAYMENT_FEE_PERCENTAGE_DENOMINATOR()": FunctionFragment;
    "PAYMENT_FEE_SLIPPAGE_PERCENT()": FunctionFragment;
    "addAdmin(address)": FunctionFragment;
    "addPublicGood(address)": FunctionFragment;
    "addSupportedERC20(address)": FunctionFragment;
    "admins(address)": FunctionFragment;
    "batchSendTo(tuple[])": FunctionFragment;
    "calculateBatchFee(tuple[])": FunctionFragment;
    "changeMinimalPaymentFee(uint256,uint256)": FunctionFragment;
    "changePaymentFeePercentage(uint256,uint256)": FunctionFragment;
    "checkSequencer()": FunctionFragment;
    "deleteAdmin(address)": FunctionFragment;
    "deletePublicGood(address)": FunctionFragment;
    "deleteSupportedERC20(address)": FunctionFragment;
    "getPaymentFee(uint256,uint8,address)": FunctionFragment;
    "getPaymentFeePost(uint256,uint8,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "publicGoods(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sendERC1155To(address,uint256,uint256,address,string)": FunctionFragment;
    "sendERC20To(address,uint256,address,string)": FunctionFragment;
    "sendERC721To(address,uint256,address,string)": FunctionFragment;
    "sendNativeTo(address,string)": FunctionFragment;
    "supportedERC20(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawToken(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EAS_SCHEMA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FALLBACK_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FALLBACK_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_TYPE_MAPPING",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMAL_PAYMENT_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMAL_PAYMENT_FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NATIVE_USD_STALE_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NATIVE_WEI_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAYMENT_FEE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAYMENT_FEE_PERCENTAGE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAYMENT_FEE_SLIPPAGE_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addPublicGood",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportedERC20",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "admins", values: [string]): string;
  encodeFunctionData(
    functionFragment: "batchSendTo",
    values: [
      {
        assetType: BigNumberish;
        recipient: string;
        amount: BigNumberish;
        tokenId: BigNumberish;
        tokenAddress: string;
        message: string;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateBatchFee",
    values: [
      {
        assetType: BigNumberish;
        recipient: string;
        amount: BigNumberish;
        tokenId: BigNumberish;
        tokenAddress: string;
        message: string;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMinimalPaymentFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changePaymentFeePercentage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSequencer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deleteAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deletePublicGood",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteSupportedERC20",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentFee",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentFeePost",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "publicGoods", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendERC1155To",
    values: [string, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendERC20To",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendERC721To",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendNativeTo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedERC20",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "EAS_SCHEMA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FALLBACK_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FALLBACK_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_TYPE_MAPPING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMAL_PAYMENT_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMAL_PAYMENT_FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NATIVE_USD_STALE_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NATIVE_WEI_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAYMENT_FEE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAYMENT_FEE_PERCENTAGE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAYMENT_FEE_SLIPPAGE_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPublicGood",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchSendTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateBatchFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMinimalPaymentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePaymentFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSequencer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deletePublicGood",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteSupportedERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentFeePost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicGoods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendERC1155To",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendERC20To",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendERC721To",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendNativeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "OracleFailed(string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TipMessage(address,string,address,uint8,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OracleFailed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TipMessage"): EventFragment;
}

export type OracleFailedEvent = TypedEvent<[string] & { reason: string }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type TipMessageEvent = TypedEvent<
  [string, string, string, number, string, BigNumber, BigNumber, BigNumber] & {
    recipientAddress: string;
    message: string;
    sender: string;
    assetType: number;
    tokenAddress: string;
    tokenId: BigNumber;
    amount: BigNumber;
    fee: BigNumber;
  }
>;

export class Tipping extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TippingInterface;

  functions: {
    EAS_SCHEMA(overrides?: CallOverrides): Promise<[string]>;

    FALLBACK_DECIMALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    FALLBACK_PRICE(overrides?: CallOverrides): Promise<[BigNumber]>;

    FEE_TYPE_MAPPING(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    MINIMAL_PAYMENT_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINIMAL_PAYMENT_FEE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    NATIVE_USD_STALE_THRESHOLD(overrides?: CallOverrides): Promise<[BigNumber]>;

    NATIVE_WEI_MULTIPLIER(overrides?: CallOverrides): Promise<[BigNumber]>;

    PAYMENT_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PAYMENT_FEE_PERCENTAGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    PAYMENT_FEE_SLIPPAGE_PERCENT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPublicGood(
      publicGoodAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSupportedERC20(
      erc20Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admins(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    batchSendTo(
      calls: {
        assetType: BigNumberish;
        recipient: string;
        amount: BigNumberish;
        tokenId: BigNumberish;
        tokenAddress: string;
        message: string;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateBatchFee(
      calls: {
        assetType: BigNumberish;
        recipient: string;
        amount: BigNumberish;
        tokenId: BigNumberish;
        tokenAddress: string;
        message: string;
      }[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([number, string, BigNumber, BigNumber, string, string, BigNumber] & {
          assetType: number;
          recipient: string;
          amount: BigNumber;
          tokenId: BigNumber;
          tokenAddress: string;
          message: string;
          nativeAmount: BigNumber;
        })[]
      ] & {
        resultCalls: ([
          number,
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          BigNumber
        ] & {
          assetType: number;
          recipient: string;
          amount: BigNumber;
          tokenId: BigNumber;
          tokenAddress: string;
          message: string;
          nativeAmount: BigNumber;
        })[];
      }
    >;

    changeMinimalPaymentFee(
      _minimalPaymentFee: BigNumberish,
      _paymentFeeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changePaymentFeePercentage(
      _paymentFeePercentage: BigNumberish,
      _paymentFeeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkSequencer(overrides?: CallOverrides): Promise<[boolean]>;

    deleteAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deletePublicGood(
      publicGoodAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteSupportedERC20(
      erc20Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPaymentFee(
      _value: BigNumberish,
      _assetType: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPaymentFeePost(
      _value: BigNumberish,
      _assetType: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    publicGoods(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(overrides?: CallOverrides): Promise<[void]>;

    sendERC1155To(
      _recipient: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _assetContractAddress: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendERC20To(
      _recipient: string,
      _amount: BigNumberish,
      _tokenContractAddr: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendERC721To(
      _recipient: string,
      _tokenId: BigNumberish,
      _nftContractAddress: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendNativeTo(
      _recipient: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportedERC20(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _tokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  EAS_SCHEMA(overrides?: CallOverrides): Promise<string>;

  FALLBACK_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

  FALLBACK_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

  FEE_TYPE_MAPPING(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  MINIMAL_PAYMENT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMAL_PAYMENT_FEE_DENOMINATOR(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  NATIVE_USD_STALE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  NATIVE_WEI_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

  PAYMENT_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  PAYMENT_FEE_PERCENTAGE_DENOMINATOR(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  PAYMENT_FEE_SLIPPAGE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  addAdmin(
    _adminAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPublicGood(
    publicGoodAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSupportedERC20(
    erc20Address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admins(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  batchSendTo(
    calls: {
      assetType: BigNumberish;
      recipient: string;
      amount: BigNumberish;
      tokenId: BigNumberish;
      tokenAddress: string;
      message: string;
    }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateBatchFee(
    calls: {
      assetType: BigNumberish;
      recipient: string;
      amount: BigNumberish;
      tokenId: BigNumberish;
      tokenAddress: string;
      message: string;
    }[],
    overrides?: CallOverrides
  ): Promise<
    ([number, string, BigNumber, BigNumber, string, string, BigNumber] & {
      assetType: number;
      recipient: string;
      amount: BigNumber;
      tokenId: BigNumber;
      tokenAddress: string;
      message: string;
      nativeAmount: BigNumber;
    })[]
  >;

  changeMinimalPaymentFee(
    _minimalPaymentFee: BigNumberish,
    _paymentFeeDenominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changePaymentFeePercentage(
    _paymentFeePercentage: BigNumberish,
    _paymentFeeDenominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkSequencer(overrides?: CallOverrides): Promise<boolean>;

  deleteAdmin(
    _adminAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deletePublicGood(
    publicGoodAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteSupportedERC20(
    erc20Address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPaymentFee(
    _value: BigNumberish,
    _assetType: BigNumberish,
    _recipient: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPaymentFeePost(
    _value: BigNumberish,
    _assetType: BigNumberish,
    _recipient: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  publicGoods(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(overrides?: CallOverrides): Promise<void>;

  sendERC1155To(
    _recipient: string,
    _tokenId: BigNumberish,
    _amount: BigNumberish,
    _assetContractAddress: string,
    _message: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendERC20To(
    _recipient: string,
    _amount: BigNumberish,
    _tokenContractAddr: string,
    _message: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendERC721To(
    _recipient: string,
    _tokenId: BigNumberish,
    _nftContractAddress: string,
    _message: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendNativeTo(
    _recipient: string,
    _message: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportedERC20(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _tokenContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    EAS_SCHEMA(overrides?: CallOverrides): Promise<string>;

    FALLBACK_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    FALLBACK_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_TYPE_MAPPING(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    MINIMAL_PAYMENT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMAL_PAYMENT_FEE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    NATIVE_USD_STALE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    NATIVE_WEI_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    PAYMENT_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    PAYMENT_FEE_PERCENTAGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PAYMENT_FEE_SLIPPAGE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    addAdmin(_adminAddress: string, overrides?: CallOverrides): Promise<void>;

    addPublicGood(
      publicGoodAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSupportedERC20(
      erc20Address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    admins(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    batchSendTo(
      calls: {
        assetType: BigNumberish;
        recipient: string;
        amount: BigNumberish;
        tokenId: BigNumberish;
        tokenAddress: string;
        message: string;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    calculateBatchFee(
      calls: {
        assetType: BigNumberish;
        recipient: string;
        amount: BigNumberish;
        tokenId: BigNumberish;
        tokenAddress: string;
        message: string;
      }[],
      overrides?: CallOverrides
    ): Promise<
      ([number, string, BigNumber, BigNumber, string, string, BigNumber] & {
        assetType: number;
        recipient: string;
        amount: BigNumber;
        tokenId: BigNumber;
        tokenAddress: string;
        message: string;
        nativeAmount: BigNumber;
      })[]
    >;

    changeMinimalPaymentFee(
      _minimalPaymentFee: BigNumberish,
      _paymentFeeDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changePaymentFeePercentage(
      _paymentFeePercentage: BigNumberish,
      _paymentFeeDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkSequencer(overrides?: CallOverrides): Promise<boolean>;

    deleteAdmin(
      _adminAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deletePublicGood(
      publicGoodAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteSupportedERC20(
      erc20Address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getPaymentFee(
      _value: BigNumberish,
      _assetType: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentFeePost(
      _value: BigNumberish,
      _assetType: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    publicGoods(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sendERC1155To(
      _recipient: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _assetContractAddress: string,
      _message: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendERC20To(
      _recipient: string,
      _amount: BigNumberish,
      _tokenContractAddr: string,
      _message: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendERC721To(
      _recipient: string,
      _tokenId: BigNumberish,
      _nftContractAddress: string,
      _message: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendNativeTo(
      _recipient: string,
      _message: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportedERC20(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawToken(
      _tokenContract: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OracleFailed(string)"(
      reason?: null
    ): TypedEventFilter<[string], { reason: string }>;

    OracleFailed(reason?: null): TypedEventFilter<[string], { reason: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "TipMessage(address,string,address,uint8,address,uint256,uint256,uint256)"(
      recipientAddress?: string | null,
      message?: null,
      sender?: string | null,
      assetType?: null,
      tokenAddress?: string | null,
      tokenId?: null,
      amount?: null,
      fee?: null
    ): TypedEventFilter<
      [string, string, string, number, string, BigNumber, BigNumber, BigNumber],
      {
        recipientAddress: string;
        message: string;
        sender: string;
        assetType: number;
        tokenAddress: string;
        tokenId: BigNumber;
        amount: BigNumber;
        fee: BigNumber;
      }
    >;

    TipMessage(
      recipientAddress?: string | null,
      message?: null,
      sender?: string | null,
      assetType?: null,
      tokenAddress?: string | null,
      tokenId?: null,
      amount?: null,
      fee?: null
    ): TypedEventFilter<
      [string, string, string, number, string, BigNumber, BigNumber, BigNumber],
      {
        recipientAddress: string;
        message: string;
        sender: string;
        assetType: number;
        tokenAddress: string;
        tokenId: BigNumber;
        amount: BigNumber;
        fee: BigNumber;
      }
    >;
  };

  estimateGas: {
    EAS_SCHEMA(overrides?: CallOverrides): Promise<BigNumber>;

    FALLBACK_DECIMALS(overrides?: CallOverrides): Promise<BigNumber>;

    FALLBACK_PRICE(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_TYPE_MAPPING(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MINIMAL_PAYMENT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMAL_PAYMENT_FEE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    NATIVE_USD_STALE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    NATIVE_WEI_MULTIPLIER(overrides?: CallOverrides): Promise<BigNumber>;

    PAYMENT_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    PAYMENT_FEE_PERCENTAGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PAYMENT_FEE_SLIPPAGE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    addAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPublicGood(
      publicGoodAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSupportedERC20(
      erc20Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admins(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    batchSendTo(
      calls: {
        assetType: BigNumberish;
        recipient: string;
        amount: BigNumberish;
        tokenId: BigNumberish;
        tokenAddress: string;
        message: string;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateBatchFee(
      calls: {
        assetType: BigNumberish;
        recipient: string;
        amount: BigNumberish;
        tokenId: BigNumberish;
        tokenAddress: string;
        message: string;
      }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeMinimalPaymentFee(
      _minimalPaymentFee: BigNumberish,
      _paymentFeeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changePaymentFeePercentage(
      _paymentFeePercentage: BigNumberish,
      _paymentFeeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkSequencer(overrides?: CallOverrides): Promise<BigNumber>;

    deleteAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deletePublicGood(
      publicGoodAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteSupportedERC20(
      erc20Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPaymentFee(
      _value: BigNumberish,
      _assetType: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentFeePost(
      _value: BigNumberish,
      _assetType: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    publicGoods(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>;

    sendERC1155To(
      _recipient: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _assetContractAddress: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendERC20To(
      _recipient: string,
      _amount: BigNumberish,
      _tokenContractAddr: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendERC721To(
      _recipient: string,
      _tokenId: BigNumberish,
      _nftContractAddress: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendNativeTo(
      _recipient: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportedERC20(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      _tokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EAS_SCHEMA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FALLBACK_DECIMALS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FALLBACK_PRICE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEE_TYPE_MAPPING(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINIMAL_PAYMENT_FEE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINIMAL_PAYMENT_FEE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NATIVE_USD_STALE_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    NATIVE_WEI_MULTIPLIER(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAYMENT_FEE_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAYMENT_FEE_PERCENTAGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAYMENT_FEE_SLIPPAGE_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPublicGood(
      publicGoodAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSupportedERC20(
      erc20Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admins(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchSendTo(
      calls: {
        assetType: BigNumberish;
        recipient: string;
        amount: BigNumberish;
        tokenId: BigNumberish;
        tokenAddress: string;
        message: string;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateBatchFee(
      calls: {
        assetType: BigNumberish;
        recipient: string;
        amount: BigNumberish;
        tokenId: BigNumberish;
        tokenAddress: string;
        message: string;
      }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeMinimalPaymentFee(
      _minimalPaymentFee: BigNumberish,
      _paymentFeeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changePaymentFeePercentage(
      _paymentFeePercentage: BigNumberish,
      _paymentFeeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkSequencer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deleteAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deletePublicGood(
      publicGoodAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteSupportedERC20(
      erc20Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPaymentFee(
      _value: BigNumberish,
      _assetType: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaymentFeePost(
      _value: BigNumberish,
      _assetType: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publicGoods(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendERC1155To(
      _recipient: string,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _assetContractAddress: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendERC20To(
      _recipient: string,
      _amount: BigNumberish,
      _tokenContractAddr: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendERC721To(
      _recipient: string,
      _tokenId: BigNumberish,
      _nftContractAddress: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendNativeTo(
      _recipient: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportedERC20(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _tokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
