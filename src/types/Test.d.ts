/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TestInterface extends ethers.utils.Interface {
  functions: {
    "IDrissAddr()": FunctionFragment;
    "addAdmin(address)": FunctionFragment;
    "addWalletTag(string,string)": FunctionFragment;
    "contractOwner()": FunctionFragment;
    "deleteAdmin(address)": FunctionFragment;
    "deleteReverseMapping()": FunctionFragment;
    "deleteWalletTag(string)": FunctionFragment;
    "registerReverseIDriss(string,string)": FunctionFragment;
    "reverseIDriss(address)": FunctionFragment;
    "transferContractOwnership(address)": FunctionFragment;
    "walletTags(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "IDrissAddr",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "addAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addWalletTag",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "contractOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deleteAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deleteReverseMapping",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteWalletTag",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerReverseIDriss",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "reverseIDriss",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferContractOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "walletTags", values: [string]): string;

  decodeFunctionResult(functionFragment: "IDrissAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addWalletTag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteReverseMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteWalletTag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerReverseIDriss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reverseIDriss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferContractOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "walletTags", data: BytesLike): Result;

  events: {};
}

export class Test extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TestInterface;

  functions: {
    IDrissAddr(overrides?: CallOverrides): Promise<[string]>;

    addAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addWalletTag(
      _tag: string,
      _tagHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractOwner(overrides?: CallOverrides): Promise<[string]>;

    deleteAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteReverseMapping(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteWalletTag(
      _tag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerReverseIDriss(
      _handle: string,
      _walletTag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reverseIDriss(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    transferContractOwnership(
      newOwner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    walletTags(arg0: string, overrides?: CallOverrides): Promise<[string]>;
  };

  IDrissAddr(overrides?: CallOverrides): Promise<string>;

  addAdmin(
    adminAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addWalletTag(
    _tag: string,
    _tagHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractOwner(overrides?: CallOverrides): Promise<string>;

  deleteAdmin(
    adminAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteReverseMapping(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteWalletTag(
    _tag: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerReverseIDriss(
    _handle: string,
    _walletTag: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reverseIDriss(arg0: string, overrides?: CallOverrides): Promise<string>;

  transferContractOwnership(
    newOwner: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  walletTags(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    IDrissAddr(overrides?: CallOverrides): Promise<string>;

    addAdmin(adminAddress: string, overrides?: CallOverrides): Promise<void>;

    addWalletTag(
      _tag: string,
      _tagHash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    contractOwner(overrides?: CallOverrides): Promise<string>;

    deleteAdmin(adminAddress: string, overrides?: CallOverrides): Promise<void>;

    deleteReverseMapping(overrides?: CallOverrides): Promise<void>;

    deleteWalletTag(_tag: string, overrides?: CallOverrides): Promise<void>;

    registerReverseIDriss(
      _handle: string,
      _walletTag: string,
      overrides?: CallOverrides
    ): Promise<void>;

    reverseIDriss(arg0: string, overrides?: CallOverrides): Promise<string>;

    transferContractOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    walletTags(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    IDrissAddr(overrides?: CallOverrides): Promise<BigNumber>;

    addAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addWalletTag(
      _tag: string,
      _tagHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractOwner(overrides?: CallOverrides): Promise<BigNumber>;

    deleteAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteReverseMapping(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteWalletTag(
      _tag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerReverseIDriss(
      _handle: string,
      _walletTag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reverseIDriss(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transferContractOwnership(
      newOwner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    walletTags(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    IDrissAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addWalletTag(
      _tag: string,
      _tagHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deleteAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteReverseMapping(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteWalletTag(
      _tag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerReverseIDriss(
      _handle: string,
      _walletTag: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reverseIDriss(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferContractOwnership(
      newOwner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    walletTags(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
