/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SendToHashMockDataInterface extends ethers.utils.Interface {
  functions: {
    "IDRISS_ADDR()": FunctionFragment;
    "MINIMAL_PAYMENT_FEE()": FunctionFragment;
    "MINIMAL_PAYMENT_FEE_DENOMINATOR()": FunctionFragment;
    "PAYMENT_FEE_PERCENTAGE()": FunctionFragment;
    "PAYMENT_FEE_PERCENTAGE_DENOMINATOR()": FunctionFragment;
    "PAYMENT_FEE_SLIPPAGE_PERCENT()": FunctionFragment;
    "balanceOf(bytes32,uint8,address,uint256)": FunctionFragment;
    "batch(bytes[])": FunctionFragment;
    "changeMinimalPaymentFee(uint256,uint256)": FunctionFragment;
    "changePaymentFeePercentage(uint256,uint256)": FunctionFragment;
    "claim(string,string,uint8,address)": FunctionFragment;
    "claimPaymentFees()": FunctionFragment;
    "getBeneficiaryMapAmount(bytes32,uint8,address)": FunctionFragment;
    "getBeneficiaryMapAssetIdAmounts(bytes32,uint8,address,address)": FunctionFragment;
    "getBeneficiaryMapAssetIds(bytes32,uint8,address,address)": FunctionFragment;
    "getBeneficiaryPayersArray(bytes32,uint8,address)": FunctionFragment;
    "getBeneficiaryPayersMap(address,bytes32,uint8,address)": FunctionFragment;
    "getPayerAssetMapAmount(address,bytes32,uint8,address)": FunctionFragment;
    "getPayerAssetMapAssetIdAmounts(address,bytes32,uint8,address)": FunctionFragment;
    "getPayerAssetMapAssetIds(address,bytes32,uint8,address)": FunctionFragment;
    "getPaymentFee(uint256,uint8)": FunctionFragment;
    "hashIDrissWithPassword(string,string)": FunctionFragment;
    "moveAssetToOtherHash(bytes32,bytes32,uint8,address)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "paymentFeesBalance()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revertPayment(bytes32,uint8,address)": FunctionFragment;
    "sendToAnyone(bytes32,uint256,uint8,address,uint256,string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "IDRISS_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMAL_PAYMENT_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMAL_PAYMENT_FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAYMENT_FEE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAYMENT_FEE_PERCENTAGE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAYMENT_FEE_SLIPPAGE_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [BytesLike, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "batch", values: [BytesLike[]]): string;
  encodeFunctionData(
    functionFragment: "changeMinimalPaymentFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changePaymentFeePercentage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPaymentFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBeneficiaryMapAmount",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBeneficiaryMapAssetIdAmounts",
    values: [BytesLike, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBeneficiaryMapAssetIds",
    values: [BytesLike, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBeneficiaryPayersArray",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBeneficiaryPayersMap",
    values: [string, BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayerAssetMapAmount",
    values: [string, BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayerAssetMapAssetIdAmounts",
    values: [string, BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayerAssetMapAssetIds",
    values: [string, BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hashIDrissWithPassword",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "moveAssetToOtherHash",
    values: [BytesLike, BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentFeesBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revertPayment",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendToAnyone",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "IDRISS_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMAL_PAYMENT_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMAL_PAYMENT_FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAYMENT_FEE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAYMENT_FEE_PERCENTAGE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAYMENT_FEE_SLIPPAGE_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMinimalPaymentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePaymentFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimPaymentFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBeneficiaryMapAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBeneficiaryMapAssetIdAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBeneficiaryMapAssetIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBeneficiaryPayersArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBeneficiaryPayersMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayerAssetMapAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayerAssetMapAssetIdAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPayerAssetMapAssetIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashIDrissWithPassword",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveAssetToOtherHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentFeesBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendToAnyone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AssetClaimed(bytes32,address,address,uint256,uint8)": EventFragment;
    "AssetMoved(bytes32,bytes32,address,address,uint8)": EventFragment;
    "AssetTransferReverted(bytes32,address,address,uint256,uint8)": EventFragment;
    "AssetTransferred(bytes32,address,address,uint256,uint8,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetMoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetTransferReverted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type AssetClaimedEvent = TypedEvent<
  [string, string, string, BigNumber, number] & {
    toHash: string;
    beneficiary: string;
    assetContractAddress: string;
    amount: BigNumber;
    assetType: number;
  }
>;

export type AssetMovedEvent = TypedEvent<
  [string, string, string, string, number] & {
    fromHash: string;
    toHash: string;
    from: string;
    assetContractAddress: string;
    assetType: number;
  }
>;

export type AssetTransferRevertedEvent = TypedEvent<
  [string, string, string, BigNumber, number] & {
    toHash: string;
    from: string;
    assetContractAddress: string;
    amount: BigNumber;
    assetType: number;
  }
>;

export type AssetTransferredEvent = TypedEvent<
  [string, string, string, BigNumber, number, string] & {
    toHash: string;
    from: string;
    assetContractAddress: string;
    amount: BigNumber;
    assetType: number;
    message: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class SendToHashMockData extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SendToHashMockDataInterface;

  functions: {
    IDRISS_ADDR(overrides?: CallOverrides): Promise<[string]>;

    MINIMAL_PAYMENT_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINIMAL_PAYMENT_FEE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    PAYMENT_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PAYMENT_FEE_PERCENTAGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    PAYMENT_FEE_SLIPPAGE_PERCENT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    batch(
      _calls: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeMinimalPaymentFee(
      _minimalPaymentFee: BigNumberish,
      _paymentFeeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changePaymentFeePercentage(
      _paymentFeePercentage: BigNumberish,
      _paymentFeeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      _IDrissHash: string,
      _claimPassword: string,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimPaymentFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBeneficiaryMapAmount(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBeneficiaryMapAssetIdAmounts(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _payerAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [([BigNumber, BigNumber] & { id: BigNumber; amount: BigNumber })[]]
    >;

    getBeneficiaryMapAssetIds(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _payerAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getBeneficiaryPayersArray(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getBeneficiaryPayersMap(
      _payerAddress: string,
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getPayerAssetMapAmount(
      _payerAddress: string,
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPayerAssetMapAssetIdAmounts(
      _payerAddress: string,
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [([BigNumber, BigNumber] & { id: BigNumber; amount: BigNumber })[]]
    >;

    getPayerAssetMapAssetIds(
      _payerAddress: string,
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getPaymentFee(
      _value: BigNumberish,
      _assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashIDrissWithPassword(
      _IDrissHash: string,
      _claimPassword: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    moveAssetToOtherHash(
      _FromIDrissHash: BytesLike,
      _ToIDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paymentFeesBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: CallOverrides): Promise<[void]>;

    revertPayment(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendToAnyone(
      _IDrissHash: BytesLike,
      _amount: BigNumberish,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _assetId: BigNumberish,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  IDRISS_ADDR(overrides?: CallOverrides): Promise<string>;

  MINIMAL_PAYMENT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMAL_PAYMENT_FEE_DENOMINATOR(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  PAYMENT_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  PAYMENT_FEE_PERCENTAGE_DENOMINATOR(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  PAYMENT_FEE_SLIPPAGE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(
    _IDrissHash: BytesLike,
    _assetType: BigNumberish,
    _assetContractAddress: string,
    _assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batch(
    _calls: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeMinimalPaymentFee(
    _minimalPaymentFee: BigNumberish,
    _paymentFeeDenominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changePaymentFeePercentage(
    _paymentFeePercentage: BigNumberish,
    _paymentFeeDenominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    _IDrissHash: string,
    _claimPassword: string,
    _assetType: BigNumberish,
    _assetContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimPaymentFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBeneficiaryMapAmount(
    _IDrissHash: BytesLike,
    _assetType: BigNumberish,
    _assetContractAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBeneficiaryMapAssetIdAmounts(
    _IDrissHash: BytesLike,
    _assetType: BigNumberish,
    _assetContractAddress: string,
    _payerAddress: string,
    overrides?: CallOverrides
  ): Promise<([BigNumber, BigNumber] & { id: BigNumber; amount: BigNumber })[]>;

  getBeneficiaryMapAssetIds(
    _IDrissHash: BytesLike,
    _assetType: BigNumberish,
    _assetContractAddress: string,
    _payerAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getBeneficiaryPayersArray(
    _IDrissHash: BytesLike,
    _assetType: BigNumberish,
    _assetContractAddress: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getBeneficiaryPayersMap(
    _payerAddress: string,
    _IDrissHash: BytesLike,
    _assetType: BigNumberish,
    _assetContractAddress: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getPayerAssetMapAmount(
    _payerAddress: string,
    _IDrissHash: BytesLike,
    _assetType: BigNumberish,
    _assetContractAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPayerAssetMapAssetIdAmounts(
    _payerAddress: string,
    _IDrissHash: BytesLike,
    _assetType: BigNumberish,
    _assetContractAddress: string,
    overrides?: CallOverrides
  ): Promise<([BigNumber, BigNumber] & { id: BigNumber; amount: BigNumber })[]>;

  getPayerAssetMapAssetIds(
    _payerAddress: string,
    _IDrissHash: BytesLike,
    _assetType: BigNumberish,
    _assetContractAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getPaymentFee(
    _value: BigNumberish,
    _assetType: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashIDrissWithPassword(
    _IDrissHash: string,
    _claimPassword: string,
    overrides?: CallOverrides
  ): Promise<string>;

  moveAssetToOtherHash(
    _FromIDrissHash: BytesLike,
    _ToIDrissHash: BytesLike,
    _assetType: BigNumberish,
    _assetContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    arg0: string,
    arg1: string,
    arg2: BigNumberish[],
    arg3: BigNumberish[],
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  paymentFeesBalance(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: CallOverrides): Promise<void>;

  revertPayment(
    _IDrissHash: BytesLike,
    _assetType: BigNumberish,
    _assetContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendToAnyone(
    _IDrissHash: BytesLike,
    _amount: BigNumberish,
    _assetType: BigNumberish,
    _assetContractAddress: string,
    _assetId: BigNumberish,
    _message: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    IDRISS_ADDR(overrides?: CallOverrides): Promise<string>;

    MINIMAL_PAYMENT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMAL_PAYMENT_FEE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PAYMENT_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    PAYMENT_FEE_PERCENTAGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PAYMENT_FEE_SLIPPAGE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batch(_calls: BytesLike[], overrides?: CallOverrides): Promise<void>;

    changeMinimalPaymentFee(
      _minimalPaymentFee: BigNumberish,
      _paymentFeeDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changePaymentFeePercentage(
      _paymentFeePercentage: BigNumberish,
      _paymentFeeDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      _IDrissHash: string,
      _claimPassword: string,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    claimPaymentFees(overrides?: CallOverrides): Promise<void>;

    getBeneficiaryMapAmount(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBeneficiaryMapAssetIdAmounts(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _payerAddress: string,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber] & { id: BigNumber; amount: BigNumber })[]
    >;

    getBeneficiaryMapAssetIds(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _payerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getBeneficiaryPayersArray(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getBeneficiaryPayersMap(
      _payerAddress: string,
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getPayerAssetMapAmount(
      _payerAddress: string,
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayerAssetMapAssetIdAmounts(
      _payerAddress: string,
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber] & { id: BigNumber; amount: BigNumber })[]
    >;

    getPayerAssetMapAssetIds(
      _payerAddress: string,
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getPaymentFee(
      _value: BigNumberish,
      _assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashIDrissWithPassword(
      _IDrissHash: string,
      _claimPassword: string,
      overrides?: CallOverrides
    ): Promise<string>;

    moveAssetToOtherHash(
      _FromIDrissHash: BytesLike,
      _ToIDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    paymentFeesBalance(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revertPayment(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendToAnyone(
      _IDrissHash: BytesLike,
      _amount: BigNumberish,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _assetId: BigNumberish,
      _message: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetClaimed(bytes32,address,address,uint256,uint8)"(
      toHash?: BytesLike | null,
      beneficiary?: string | null,
      assetContractAddress?: string | null,
      amount?: null,
      assetType?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, number],
      {
        toHash: string;
        beneficiary: string;
        assetContractAddress: string;
        amount: BigNumber;
        assetType: number;
      }
    >;

    AssetClaimed(
      toHash?: BytesLike | null,
      beneficiary?: string | null,
      assetContractAddress?: string | null,
      amount?: null,
      assetType?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, number],
      {
        toHash: string;
        beneficiary: string;
        assetContractAddress: string;
        amount: BigNumber;
        assetType: number;
      }
    >;

    "AssetMoved(bytes32,bytes32,address,address,uint8)"(
      fromHash?: BytesLike | null,
      toHash?: BytesLike | null,
      from?: string | null,
      assetContractAddress?: null,
      assetType?: null
    ): TypedEventFilter<
      [string, string, string, string, number],
      {
        fromHash: string;
        toHash: string;
        from: string;
        assetContractAddress: string;
        assetType: number;
      }
    >;

    AssetMoved(
      fromHash?: BytesLike | null,
      toHash?: BytesLike | null,
      from?: string | null,
      assetContractAddress?: null,
      assetType?: null
    ): TypedEventFilter<
      [string, string, string, string, number],
      {
        fromHash: string;
        toHash: string;
        from: string;
        assetContractAddress: string;
        assetType: number;
      }
    >;

    "AssetTransferReverted(bytes32,address,address,uint256,uint8)"(
      toHash?: BytesLike | null,
      from?: string | null,
      assetContractAddress?: string | null,
      amount?: null,
      assetType?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, number],
      {
        toHash: string;
        from: string;
        assetContractAddress: string;
        amount: BigNumber;
        assetType: number;
      }
    >;

    AssetTransferReverted(
      toHash?: BytesLike | null,
      from?: string | null,
      assetContractAddress?: string | null,
      amount?: null,
      assetType?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, number],
      {
        toHash: string;
        from: string;
        assetContractAddress: string;
        amount: BigNumber;
        assetType: number;
      }
    >;

    "AssetTransferred(bytes32,address,address,uint256,uint8,string)"(
      toHash?: BytesLike | null,
      from?: string | null,
      assetContractAddress?: string | null,
      amount?: null,
      assetType?: null,
      message?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, number, string],
      {
        toHash: string;
        from: string;
        assetContractAddress: string;
        amount: BigNumber;
        assetType: number;
        message: string;
      }
    >;

    AssetTransferred(
      toHash?: BytesLike | null,
      from?: string | null,
      assetContractAddress?: string | null,
      amount?: null,
      assetType?: null,
      message?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, number, string],
      {
        toHash: string;
        from: string;
        assetContractAddress: string;
        amount: BigNumber;
        assetType: number;
        message: string;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    IDRISS_ADDR(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMAL_PAYMENT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMAL_PAYMENT_FEE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PAYMENT_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    PAYMENT_FEE_PERCENTAGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PAYMENT_FEE_SLIPPAGE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batch(
      _calls: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeMinimalPaymentFee(
      _minimalPaymentFee: BigNumberish,
      _paymentFeeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changePaymentFeePercentage(
      _paymentFeePercentage: BigNumberish,
      _paymentFeeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      _IDrissHash: string,
      _claimPassword: string,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimPaymentFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBeneficiaryMapAmount(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBeneficiaryMapAssetIdAmounts(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _payerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBeneficiaryMapAssetIds(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _payerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBeneficiaryPayersArray(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBeneficiaryPayersMap(
      _payerAddress: string,
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayerAssetMapAmount(
      _payerAddress: string,
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayerAssetMapAssetIdAmounts(
      _payerAddress: string,
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayerAssetMapAssetIds(
      _payerAddress: string,
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPaymentFee(
      _value: BigNumberish,
      _assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashIDrissWithPassword(
      _IDrissHash: string,
      _claimPassword: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moveAssetToOtherHash(
      _FromIDrissHash: BytesLike,
      _ToIDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paymentFeesBalance(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>;

    revertPayment(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendToAnyone(
      _IDrissHash: BytesLike,
      _amount: BigNumberish,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _assetId: BigNumberish,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IDRISS_ADDR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINIMAL_PAYMENT_FEE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINIMAL_PAYMENT_FEE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAYMENT_FEE_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAYMENT_FEE_PERCENTAGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAYMENT_FEE_SLIPPAGE_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batch(
      _calls: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeMinimalPaymentFee(
      _minimalPaymentFee: BigNumberish,
      _paymentFeeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changePaymentFeePercentage(
      _paymentFeePercentage: BigNumberish,
      _paymentFeeDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _IDrissHash: string,
      _claimPassword: string,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimPaymentFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBeneficiaryMapAmount(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBeneficiaryMapAssetIdAmounts(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _payerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBeneficiaryMapAssetIds(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _payerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBeneficiaryPayersArray(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBeneficiaryPayersMap(
      _payerAddress: string,
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayerAssetMapAmount(
      _payerAddress: string,
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayerAssetMapAssetIdAmounts(
      _payerAddress: string,
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayerAssetMapAssetIds(
      _payerAddress: string,
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPaymentFee(
      _value: BigNumberish,
      _assetType: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashIDrissWithPassword(
      _IDrissHash: string,
      _claimPassword: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moveAssetToOtherHash(
      _FromIDrissHash: BytesLike,
      _ToIDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: string,
      arg1: string,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentFeesBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revertPayment(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendToAnyone(
      _IDrissHash: BytesLike,
      _amount: BigNumberish,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _assetId: BigNumberish,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
