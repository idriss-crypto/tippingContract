/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export type BatchCallStruct = {
  assetType: BigNumberish;
  recipient: AddressLike;
  amount: BigNumberish;
  tokenId: BigNumberish;
  tokenAddress: AddressLike;
  message: string;
};

export type BatchCallStructOutput = [
  assetType: bigint,
  recipient: string,
  amount: bigint,
  tokenId: bigint,
  tokenAddress: string,
  message: string
] & {
  assetType: bigint;
  recipient: string;
  amount: bigint;
  tokenId: bigint;
  tokenAddress: string;
  message: string;
};

export type AdjustedBatchCallStruct = {
  assetType: BigNumberish;
  recipient: AddressLike;
  amount: BigNumberish;
  tokenId: BigNumberish;
  tokenAddress: AddressLike;
  message: string;
  nativeAmount: BigNumberish;
};

export type AdjustedBatchCallStructOutput = [
  assetType: bigint,
  recipient: string,
  amount: bigint,
  tokenId: bigint,
  tokenAddress: string,
  message: string,
  nativeAmount: bigint
] & {
  assetType: bigint;
  recipient: string;
  amount: bigint;
  tokenId: bigint;
  tokenAddress: string;
  message: string;
  nativeAmount: bigint;
};

export interface TippingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "EAS_SCHEMA"
      | "FALLBACK_DECIMALS"
      | "FALLBACK_PRICE"
      | "FEE_TYPE_MAPPING"
      | "MINIMAL_PAYMENT_FEE"
      | "MINIMAL_PAYMENT_FEE_DENOMINATOR"
      | "NATIVE_USD_STALE_THRESHOLD"
      | "NATIVE_WEI_MULTIPLIER"
      | "PAYMENT_FEE_PERCENTAGE"
      | "PAYMENT_FEE_PERCENTAGE_DENOMINATOR"
      | "PAYMENT_FEE_SLIPPAGE_PERCENT"
      | "addAdmin"
      | "addPublicGood"
      | "addSupportedERC20"
      | "admins"
      | "batchSendTo"
      | "calculateBatchFee"
      | "changeMinimalPaymentFee"
      | "changePaymentFeePercentage"
      | "checkSequencer"
      | "deleteAdmin"
      | "deletePublicGood"
      | "deleteSupportedERC20"
      | "getPaymentFee"
      | "getPaymentFeePost"
      | "owner"
      | "publicGoods"
      | "renounceOwnership"
      | "sendERC1155To"
      | "sendERC20To"
      | "sendERC721To"
      | "sendNativeTo"
      | "supportedERC20"
      | "transferOwnership"
      | "withdraw"
      | "withdrawToken"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OracleFailed"
      | "OwnershipTransferred"
      | "TipMessage"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "EAS_SCHEMA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FALLBACK_DECIMALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FALLBACK_PRICE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_TYPE_MAPPING",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMAL_PAYMENT_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMAL_PAYMENT_FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NATIVE_USD_STALE_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NATIVE_WEI_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAYMENT_FEE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAYMENT_FEE_PERCENTAGE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAYMENT_FEE_SLIPPAGE_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addPublicGood",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportedERC20",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "admins", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "batchSendTo",
    values: [BatchCallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateBatchFee",
    values: [BatchCallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMinimalPaymentFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changePaymentFeePercentage",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSequencer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deletePublicGood",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteSupportedERC20",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentFee",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentFeePost",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "publicGoods",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendERC1155To",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendERC20To",
    values: [AddressLike, BigNumberish, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendERC721To",
    values: [AddressLike, BigNumberish, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendNativeTo",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedERC20",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "EAS_SCHEMA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "FALLBACK_DECIMALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FALLBACK_PRICE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_TYPE_MAPPING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMAL_PAYMENT_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMAL_PAYMENT_FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NATIVE_USD_STALE_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NATIVE_WEI_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAYMENT_FEE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAYMENT_FEE_PERCENTAGE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAYMENT_FEE_SLIPPAGE_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPublicGood",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchSendTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateBatchFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMinimalPaymentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePaymentFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSequencer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deletePublicGood",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteSupportedERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentFeePost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publicGoods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendERC1155To",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendERC20To",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendERC721To",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendNativeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export namespace OracleFailedEvent {
  export type InputTuple = [reason: string];
  export type OutputTuple = [reason: string];
  export interface OutputObject {
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TipMessageEvent {
  export type InputTuple = [
    recipientAddress: AddressLike,
    message: string,
    sender: AddressLike,
    assetType: BigNumberish,
    tokenAddress: AddressLike,
    tokenId: BigNumberish,
    amount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    recipientAddress: string,
    message: string,
    sender: string,
    assetType: bigint,
    tokenAddress: string,
    tokenId: bigint,
    amount: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    recipientAddress: string;
    message: string;
    sender: string;
    assetType: bigint;
    tokenAddress: string;
    tokenId: bigint;
    amount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Tipping extends BaseContract {
  address: string;
  connect(runner?: ContractRunner | null): Tipping;
  waitForDeployment(): Promise<this>;

  interface: TippingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  EAS_SCHEMA: TypedContractMethod<[], [string], "view">;

  FALLBACK_DECIMALS: TypedContractMethod<[], [bigint], "view">;

  FALLBACK_PRICE: TypedContractMethod<[], [bigint], "view">;

  FEE_TYPE_MAPPING: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  MINIMAL_PAYMENT_FEE: TypedContractMethod<[], [bigint], "view">;

  MINIMAL_PAYMENT_FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  NATIVE_USD_STALE_THRESHOLD: TypedContractMethod<[], [bigint], "view">;

  NATIVE_WEI_MULTIPLIER: TypedContractMethod<[], [bigint], "view">;

  PAYMENT_FEE_PERCENTAGE: TypedContractMethod<[], [bigint], "view">;

  PAYMENT_FEE_PERCENTAGE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  PAYMENT_FEE_SLIPPAGE_PERCENT: TypedContractMethod<[], [bigint], "view">;

  addAdmin: TypedContractMethod<
    [_adminAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  addPublicGood: TypedContractMethod<
    [publicGoodAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  addSupportedERC20: TypedContractMethod<
    [erc20Address: AddressLike],
    [void],
    "nonpayable"
  >;

  admins: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  batchSendTo: TypedContractMethod<
    [calls: BatchCallStruct[]],
    [void],
    "payable"
  >;

  calculateBatchFee: TypedContractMethod<
    [calls: BatchCallStruct[]],
    [AdjustedBatchCallStructOutput[]],
    "view"
  >;

  changeMinimalPaymentFee: TypedContractMethod<
    [_minimalPaymentFee: BigNumberish, _paymentFeeDenominator: BigNumberish],
    [void],
    "nonpayable"
  >;

  changePaymentFeePercentage: TypedContractMethod<
    [_paymentFeePercentage: BigNumberish, _paymentFeeDenominator: BigNumberish],
    [void],
    "nonpayable"
  >;

  checkSequencer: TypedContractMethod<[], [boolean], "view">;

  deleteAdmin: TypedContractMethod<
    [_adminAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  deletePublicGood: TypedContractMethod<
    [publicGoodAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  deleteSupportedERC20: TypedContractMethod<
    [erc20Address: AddressLike],
    [void],
    "nonpayable"
  >;

  getPaymentFee: TypedContractMethod<
    [_value: BigNumberish, _assetType: BigNumberish, _recipient: AddressLike],
    [bigint],
    "view"
  >;

  getPaymentFeePost: TypedContractMethod<
    [_value: BigNumberish, _assetType: BigNumberish, _recipient: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  publicGoods: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "view">;

  sendERC1155To: TypedContractMethod<
    [
      _recipient: AddressLike,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _assetContractAddress: AddressLike,
      _message: string
    ],
    [void],
    "payable"
  >;

  sendERC20To: TypedContractMethod<
    [
      _recipient: AddressLike,
      _amount: BigNumberish,
      _tokenContractAddr: AddressLike,
      _message: string
    ],
    [void],
    "payable"
  >;

  sendERC721To: TypedContractMethod<
    [
      _recipient: AddressLike,
      _tokenId: BigNumberish,
      _nftContractAddress: AddressLike,
      _message: string
    ],
    [void],
    "payable"
  >;

  sendNativeTo: TypedContractMethod<
    [_recipient: AddressLike, _message: string],
    [void],
    "payable"
  >;

  supportedERC20: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  withdrawToken: TypedContractMethod<
    [_tokenContract: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "EAS_SCHEMA"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FALLBACK_DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FALLBACK_PRICE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FEE_TYPE_MAPPING"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "MINIMAL_PAYMENT_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MINIMAL_PAYMENT_FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NATIVE_USD_STALE_THRESHOLD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NATIVE_WEI_MULTIPLIER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PAYMENT_FEE_PERCENTAGE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PAYMENT_FEE_PERCENTAGE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PAYMENT_FEE_SLIPPAGE_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[_adminAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addPublicGood"
  ): TypedContractMethod<
    [publicGoodAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addSupportedERC20"
  ): TypedContractMethod<[erc20Address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admins"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "batchSendTo"
  ): TypedContractMethod<[calls: BatchCallStruct[]], [void], "payable">;
  getFunction(
    nameOrSignature: "calculateBatchFee"
  ): TypedContractMethod<
    [calls: BatchCallStruct[]],
    [AdjustedBatchCallStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "changeMinimalPaymentFee"
  ): TypedContractMethod<
    [_minimalPaymentFee: BigNumberish, _paymentFeeDenominator: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changePaymentFeePercentage"
  ): TypedContractMethod<
    [_paymentFeePercentage: BigNumberish, _paymentFeeDenominator: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "checkSequencer"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "deleteAdmin"
  ): TypedContractMethod<[_adminAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deletePublicGood"
  ): TypedContractMethod<
    [publicGoodAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteSupportedERC20"
  ): TypedContractMethod<[erc20Address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getPaymentFee"
  ): TypedContractMethod<
    [_value: BigNumberish, _assetType: BigNumberish, _recipient: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPaymentFeePost"
  ): TypedContractMethod<
    [_value: BigNumberish, _assetType: BigNumberish, _recipient: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "publicGoods"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "sendERC1155To"
  ): TypedContractMethod<
    [
      _recipient: AddressLike,
      _tokenId: BigNumberish,
      _amount: BigNumberish,
      _assetContractAddress: AddressLike,
      _message: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendERC20To"
  ): TypedContractMethod<
    [
      _recipient: AddressLike,
      _amount: BigNumberish,
      _tokenContractAddr: AddressLike,
      _message: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendERC721To"
  ): TypedContractMethod<
    [
      _recipient: AddressLike,
      _tokenId: BigNumberish,
      _nftContractAddress: AddressLike,
      _message: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendNativeTo"
  ): TypedContractMethod<
    [_recipient: AddressLike, _message: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "supportedERC20"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<[_tokenContract: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OracleFailed"
  ): TypedContractEvent<
    OracleFailedEvent.InputTuple,
    OracleFailedEvent.OutputTuple,
    OracleFailedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TipMessage"
  ): TypedContractEvent<
    TipMessageEvent.InputTuple,
    TipMessageEvent.OutputTuple,
    TipMessageEvent.OutputObject
  >;

  filters: {
    "OracleFailed(string)": TypedContractEvent<
      OracleFailedEvent.InputTuple,
      OracleFailedEvent.OutputTuple,
      OracleFailedEvent.OutputObject
    >;
    OracleFailed: TypedContractEvent<
      OracleFailedEvent.InputTuple,
      OracleFailedEvent.OutputTuple,
      OracleFailedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TipMessage(address,string,address,uint8,address,uint256,uint256,uint256)": TypedContractEvent<
      TipMessageEvent.InputTuple,
      TipMessageEvent.OutputTuple,
      TipMessageEvent.OutputObject
    >;
    TipMessage: TypedContractEvent<
      TipMessageEvent.InputTuple,
      TipMessageEvent.OutputTuple,
      TipMessageEvent.OutputObject
    >;
  };
}
