/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export type BatchCallStruct = {
  assetType: BigNumberish;
  recipient: AddressLike;
  amount: BigNumberish;
  tokenId: BigNumberish;
  tokenAddress: AddressLike;
  message: string;
};

export type BatchCallStructOutput = [
  assetType: bigint,
  recipient: string,
  amount: bigint,
  tokenId: bigint,
  tokenAddress: string,
  message: string
] & {
  assetType: bigint;
  recipient: string;
  amount: bigint;
  tokenId: bigint;
  tokenAddress: string;
  message: string;
};

export interface ITippingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAdmin"
      | "addPublicGood"
      | "addSupportedERC20"
      | "batchSendTo"
      | "deleteAdmin"
      | "deletePublicGood"
      | "deleteSupportedERC20"
      | "sendERC1155To"
      | "sendERC20To"
      | "sendERC721To"
      | "sendNativeTo"
      | "withdraw"
      | "withdrawToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addPublicGood",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportedERC20",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSendTo",
    values: [BatchCallStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deletePublicGood",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteSupportedERC20",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendERC1155To",
    values: [AddressLike, BigNumberish, BigNumberish, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendERC20To",
    values: [AddressLike, BigNumberish, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendERC721To",
    values: [AddressLike, BigNumberish, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendNativeTo",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPublicGood",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSendTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deletePublicGood",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteSupportedERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendERC1155To",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendERC20To",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendERC721To",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendNativeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
}

export interface ITipping extends BaseContract {
  connect(runner?: ContractRunner | null): ITipping;
  waitForDeployment(): Promise<this>;

  interface: ITippingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAdmin: TypedContractMethod<
    [_adminAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  addPublicGood: TypedContractMethod<
    [publicGoodAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  addSupportedERC20: TypedContractMethod<
    [erc20Address: AddressLike],
    [void],
    "nonpayable"
  >;

  batchSendTo: TypedContractMethod<
    [calls: BatchCallStruct[]],
    [void],
    "payable"
  >;

  deleteAdmin: TypedContractMethod<
    [_adminAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  deletePublicGood: TypedContractMethod<
    [publicGoodAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  deleteSupportedERC20: TypedContractMethod<
    [erc20Address: AddressLike],
    [void],
    "nonpayable"
  >;

  sendERC1155To: TypedContractMethod<
    [
      _recipient: AddressLike,
      _assetId: BigNumberish,
      _amount: BigNumberish,
      _nftContractAddress: AddressLike,
      _message: string
    ],
    [void],
    "payable"
  >;

  sendERC20To: TypedContractMethod<
    [
      _recipient: AddressLike,
      _amount: BigNumberish,
      _tokenContractAddr: AddressLike,
      _message: string
    ],
    [void],
    "payable"
  >;

  sendERC721To: TypedContractMethod<
    [
      _recipient: AddressLike,
      _assetId: BigNumberish,
      _nftContractAddress: AddressLike,
      _message: string
    ],
    [void],
    "payable"
  >;

  sendNativeTo: TypedContractMethod<
    [_recipient: AddressLike, _message: string],
    [void],
    "payable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  withdrawToken: TypedContractMethod<
    [_tokenContract: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<[_adminAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addPublicGood"
  ): TypedContractMethod<
    [publicGoodAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addSupportedERC20"
  ): TypedContractMethod<[erc20Address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "batchSendTo"
  ): TypedContractMethod<[calls: BatchCallStruct[]], [void], "payable">;
  getFunction(
    nameOrSignature: "deleteAdmin"
  ): TypedContractMethod<[_adminAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deletePublicGood"
  ): TypedContractMethod<
    [publicGoodAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteSupportedERC20"
  ): TypedContractMethod<[erc20Address: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendERC1155To"
  ): TypedContractMethod<
    [
      _recipient: AddressLike,
      _assetId: BigNumberish,
      _amount: BigNumberish,
      _nftContractAddress: AddressLike,
      _message: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendERC20To"
  ): TypedContractMethod<
    [
      _recipient: AddressLike,
      _amount: BigNumberish,
      _tokenContractAddr: AddressLike,
      _message: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendERC721To"
  ): TypedContractMethod<
    [
      _recipient: AddressLike,
      _assetId: BigNumberish,
      _nftContractAddress: AddressLike,
      _message: string
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendNativeTo"
  ): TypedContractMethod<
    [_recipient: AddressLike, _message: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToken"
  ): TypedContractMethod<[_tokenContract: AddressLike], [void], "nonpayable">;

  filters: {};
}
