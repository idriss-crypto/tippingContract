/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface SendToHashInterface extends utils.Interface {
  functions: {
    "IDRISS_ADDR()": FunctionFragment;
    "MINIMAL_PAYMENT_FEE()": FunctionFragment;
    "MINIMAL_PAYMENT_FEE_DENOMINATOR()": FunctionFragment;
    "PAYMENT_FEE_PERCENTAGE()": FunctionFragment;
    "PAYMENT_FEE_PERCENTAGE_DENOMINATOR()": FunctionFragment;
    "PAYMENT_FEE_SLIPPAGE_PERCENT()": FunctionFragment;
    "balanceOf(bytes32,uint8,address,uint256)": FunctionFragment;
    "batch(bytes[])": FunctionFragment;
    "changeMinimalPaymentFee(uint256,uint256)": FunctionFragment;
    "changePaymentFeePercentage(uint256,uint256)": FunctionFragment;
    "claim(string,string,uint8,address)": FunctionFragment;
    "claimPaymentFees()": FunctionFragment;
    "getPaymentFee(uint256,uint8)": FunctionFragment;
    "hashIDrissWithPassword(string,string)": FunctionFragment;
    "moveAssetToOtherHash(bytes32,bytes32,uint8,address)": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "paymentFeesBalance()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revertPayment(bytes32,uint8,address)": FunctionFragment;
    "sendToAnyone(bytes32,uint256,uint8,address,uint256,string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IDRISS_ADDR"
      | "MINIMAL_PAYMENT_FEE"
      | "MINIMAL_PAYMENT_FEE_DENOMINATOR"
      | "PAYMENT_FEE_PERCENTAGE"
      | "PAYMENT_FEE_PERCENTAGE_DENOMINATOR"
      | "PAYMENT_FEE_SLIPPAGE_PERCENT"
      | "balanceOf"
      | "batch"
      | "changeMinimalPaymentFee"
      | "changePaymentFeePercentage"
      | "claim"
      | "claimPaymentFees"
      | "getPaymentFee"
      | "hashIDrissWithPassword"
      | "moveAssetToOtherHash"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "owner"
      | "paymentFeesBalance"
      | "renounceOwnership"
      | "revertPayment"
      | "sendToAnyone"
      | "supportsInterface"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "IDRISS_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMAL_PAYMENT_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMAL_PAYMENT_FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAYMENT_FEE_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAYMENT_FEE_PERCENTAGE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAYMENT_FEE_SLIPPAGE_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batch",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMinimalPaymentFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changePaymentFeePercentage",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPaymentFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentFee",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashIDrissWithPassword",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "moveAssetToOtherHash",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentFeesBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revertPayment",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sendToAnyone",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "IDRISS_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMAL_PAYMENT_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMAL_PAYMENT_FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAYMENT_FEE_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAYMENT_FEE_PERCENTAGE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAYMENT_FEE_SLIPPAGE_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeMinimalPaymentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePaymentFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimPaymentFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashIDrissWithPassword",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveAssetToOtherHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentFeesBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendToAnyone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AssetClaimed(bytes32,address,address,uint256,uint8)": EventFragment;
    "AssetMoved(bytes32,bytes32,address,address,uint8)": EventFragment;
    "AssetTransferReverted(bytes32,address,address,uint256,uint8)": EventFragment;
    "AssetTransferred(bytes32,address,address,uint256,uint8,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetMoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetTransferReverted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface AssetClaimedEventObject {
  toHash: string;
  beneficiary: string;
  assetContractAddress: string;
  amount: BigNumber;
  assetType: number;
}
export type AssetClaimedEvent = TypedEvent<
  [string, string, string, BigNumber, number],
  AssetClaimedEventObject
>;

export type AssetClaimedEventFilter = TypedEventFilter<AssetClaimedEvent>;

export interface AssetMovedEventObject {
  fromHash: string;
  toHash: string;
  from: string;
  assetContractAddress: string;
  assetType: number;
}
export type AssetMovedEvent = TypedEvent<
  [string, string, string, string, number],
  AssetMovedEventObject
>;

export type AssetMovedEventFilter = TypedEventFilter<AssetMovedEvent>;

export interface AssetTransferRevertedEventObject {
  toHash: string;
  from: string;
  assetContractAddress: string;
  amount: BigNumber;
  assetType: number;
}
export type AssetTransferRevertedEvent = TypedEvent<
  [string, string, string, BigNumber, number],
  AssetTransferRevertedEventObject
>;

export type AssetTransferRevertedEventFilter =
  TypedEventFilter<AssetTransferRevertedEvent>;

export interface AssetTransferredEventObject {
  toHash: string;
  from: string;
  assetContractAddress: string;
  amount: BigNumber;
  assetType: number;
  message: string;
}
export type AssetTransferredEvent = TypedEvent<
  [string, string, string, BigNumber, number, string],
  AssetTransferredEventObject
>;

export type AssetTransferredEventFilter =
  TypedEventFilter<AssetTransferredEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SendToHash extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SendToHashInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IDRISS_ADDR(overrides?: CallOverrides): Promise<[string]>;

    MINIMAL_PAYMENT_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINIMAL_PAYMENT_FEE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    PAYMENT_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PAYMENT_FEE_PERCENTAGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    PAYMENT_FEE_SLIPPAGE_PERCENT(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(
      _IDrissHash: PromiseOrValue<BytesLike>,
      _assetType: PromiseOrValue<BigNumberish>,
      _assetContractAddress: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    batch(
      _calls: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeMinimalPaymentFee(
      _minimalPaymentFee: PromiseOrValue<BigNumberish>,
      _paymentFeeDenominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changePaymentFeePercentage(
      _paymentFeePercentage: PromiseOrValue<BigNumberish>,
      _paymentFeeDenominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claim(
      _IDrissHash: PromiseOrValue<string>,
      _claimPassword: PromiseOrValue<string>,
      _assetType: PromiseOrValue<BigNumberish>,
      _assetContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimPaymentFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPaymentFee(
      _value: PromiseOrValue<BigNumberish>,
      _assetType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hashIDrissWithPassword(
      _IDrissHash: PromiseOrValue<string>,
      _claimPassword: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    moveAssetToOtherHash(
      _FromIDrissHash: PromiseOrValue<BytesLike>,
      _ToIDrissHash: PromiseOrValue<BytesLike>,
      _assetType: PromiseOrValue<BigNumberish>,
      _assetContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paymentFeesBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(overrides?: CallOverrides): Promise<[void]>;

    revertPayment(
      _IDrissHash: PromiseOrValue<BytesLike>,
      _assetType: PromiseOrValue<BigNumberish>,
      _assetContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sendToAnyone(
      _IDrissHash: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _assetType: PromiseOrValue<BigNumberish>,
      _assetContractAddress: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  IDRISS_ADDR(overrides?: CallOverrides): Promise<string>;

  MINIMAL_PAYMENT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMAL_PAYMENT_FEE_DENOMINATOR(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  PAYMENT_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  PAYMENT_FEE_PERCENTAGE_DENOMINATOR(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  PAYMENT_FEE_SLIPPAGE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(
    _IDrissHash: PromiseOrValue<BytesLike>,
    _assetType: PromiseOrValue<BigNumberish>,
    _assetContractAddress: PromiseOrValue<string>,
    _assetId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batch(
    _calls: PromiseOrValue<BytesLike>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeMinimalPaymentFee(
    _minimalPaymentFee: PromiseOrValue<BigNumberish>,
    _paymentFeeDenominator: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changePaymentFeePercentage(
    _paymentFeePercentage: PromiseOrValue<BigNumberish>,
    _paymentFeeDenominator: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claim(
    _IDrissHash: PromiseOrValue<string>,
    _claimPassword: PromiseOrValue<string>,
    _assetType: PromiseOrValue<BigNumberish>,
    _assetContractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimPaymentFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPaymentFee(
    _value: PromiseOrValue<BigNumberish>,
    _assetType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hashIDrissWithPassword(
    _IDrissHash: PromiseOrValue<string>,
    _claimPassword: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  moveAssetToOtherHash(
    _FromIDrissHash: PromiseOrValue<BytesLike>,
    _ToIDrissHash: PromiseOrValue<BytesLike>,
    _assetType: PromiseOrValue<BigNumberish>,
    _assetContractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155BatchReceived(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>[],
    arg3: PromiseOrValue<BigNumberish>[],
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BigNumberish>,
    arg4: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<BigNumberish>,
    arg3: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  paymentFeesBalance(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(overrides?: CallOverrides): Promise<void>;

  revertPayment(
    _IDrissHash: PromiseOrValue<BytesLike>,
    _assetType: PromiseOrValue<BigNumberish>,
    _assetContractAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sendToAnyone(
    _IDrissHash: PromiseOrValue<BytesLike>,
    _amount: PromiseOrValue<BigNumberish>,
    _assetType: PromiseOrValue<BigNumberish>,
    _assetContractAddress: PromiseOrValue<string>,
    _assetId: PromiseOrValue<BigNumberish>,
    _message: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    IDRISS_ADDR(overrides?: CallOverrides): Promise<string>;

    MINIMAL_PAYMENT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMAL_PAYMENT_FEE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PAYMENT_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    PAYMENT_FEE_PERCENTAGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PAYMENT_FEE_SLIPPAGE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      _IDrissHash: PromiseOrValue<BytesLike>,
      _assetType: PromiseOrValue<BigNumberish>,
      _assetContractAddress: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batch(
      _calls: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    changeMinimalPaymentFee(
      _minimalPaymentFee: PromiseOrValue<BigNumberish>,
      _paymentFeeDenominator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changePaymentFeePercentage(
      _paymentFeePercentage: PromiseOrValue<BigNumberish>,
      _paymentFeeDenominator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      _IDrissHash: PromiseOrValue<string>,
      _claimPassword: PromiseOrValue<string>,
      _assetType: PromiseOrValue<BigNumberish>,
      _assetContractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimPaymentFees(overrides?: CallOverrides): Promise<void>;

    getPaymentFee(
      _value: PromiseOrValue<BigNumberish>,
      _assetType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashIDrissWithPassword(
      _IDrissHash: PromiseOrValue<string>,
      _claimPassword: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    moveAssetToOtherHash(
      _FromIDrissHash: PromiseOrValue<BytesLike>,
      _ToIDrissHash: PromiseOrValue<BytesLike>,
      _assetType: PromiseOrValue<BigNumberish>,
      _assetContractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    paymentFeesBalance(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revertPayment(
      _IDrissHash: PromiseOrValue<BytesLike>,
      _assetType: PromiseOrValue<BigNumberish>,
      _assetContractAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    sendToAnyone(
      _IDrissHash: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _assetType: PromiseOrValue<BigNumberish>,
      _assetContractAddress: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetClaimed(bytes32,address,address,uint256,uint8)"(
      toHash?: PromiseOrValue<BytesLike> | null,
      beneficiary?: PromiseOrValue<string> | null,
      assetContractAddress?: PromiseOrValue<string> | null,
      amount?: null,
      assetType?: null
    ): AssetClaimedEventFilter;
    AssetClaimed(
      toHash?: PromiseOrValue<BytesLike> | null,
      beneficiary?: PromiseOrValue<string> | null,
      assetContractAddress?: PromiseOrValue<string> | null,
      amount?: null,
      assetType?: null
    ): AssetClaimedEventFilter;

    "AssetMoved(bytes32,bytes32,address,address,uint8)"(
      fromHash?: PromiseOrValue<BytesLike> | null,
      toHash?: PromiseOrValue<BytesLike> | null,
      from?: PromiseOrValue<string> | null,
      assetContractAddress?: null,
      assetType?: null
    ): AssetMovedEventFilter;
    AssetMoved(
      fromHash?: PromiseOrValue<BytesLike> | null,
      toHash?: PromiseOrValue<BytesLike> | null,
      from?: PromiseOrValue<string> | null,
      assetContractAddress?: null,
      assetType?: null
    ): AssetMovedEventFilter;

    "AssetTransferReverted(bytes32,address,address,uint256,uint8)"(
      toHash?: PromiseOrValue<BytesLike> | null,
      from?: PromiseOrValue<string> | null,
      assetContractAddress?: PromiseOrValue<string> | null,
      amount?: null,
      assetType?: null
    ): AssetTransferRevertedEventFilter;
    AssetTransferReverted(
      toHash?: PromiseOrValue<BytesLike> | null,
      from?: PromiseOrValue<string> | null,
      assetContractAddress?: PromiseOrValue<string> | null,
      amount?: null,
      assetType?: null
    ): AssetTransferRevertedEventFilter;

    "AssetTransferred(bytes32,address,address,uint256,uint8,string)"(
      toHash?: PromiseOrValue<BytesLike> | null,
      from?: PromiseOrValue<string> | null,
      assetContractAddress?: PromiseOrValue<string> | null,
      amount?: null,
      assetType?: null,
      message?: null
    ): AssetTransferredEventFilter;
    AssetTransferred(
      toHash?: PromiseOrValue<BytesLike> | null,
      from?: PromiseOrValue<string> | null,
      assetContractAddress?: PromiseOrValue<string> | null,
      amount?: null,
      assetType?: null,
      message?: null
    ): AssetTransferredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    IDRISS_ADDR(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMAL_PAYMENT_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMAL_PAYMENT_FEE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PAYMENT_FEE_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    PAYMENT_FEE_PERCENTAGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    PAYMENT_FEE_SLIPPAGE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      _IDrissHash: PromiseOrValue<BytesLike>,
      _assetType: PromiseOrValue<BigNumberish>,
      _assetContractAddress: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batch(
      _calls: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeMinimalPaymentFee(
      _minimalPaymentFee: PromiseOrValue<BigNumberish>,
      _paymentFeeDenominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changePaymentFeePercentage(
      _paymentFeePercentage: PromiseOrValue<BigNumberish>,
      _paymentFeeDenominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claim(
      _IDrissHash: PromiseOrValue<string>,
      _claimPassword: PromiseOrValue<string>,
      _assetType: PromiseOrValue<BigNumberish>,
      _assetContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimPaymentFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPaymentFee(
      _value: PromiseOrValue<BigNumberish>,
      _assetType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashIDrissWithPassword(
      _IDrissHash: PromiseOrValue<string>,
      _claimPassword: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moveAssetToOtherHash(
      _FromIDrissHash: PromiseOrValue<BytesLike>,
      _ToIDrissHash: PromiseOrValue<BytesLike>,
      _assetType: PromiseOrValue<BigNumberish>,
      _assetContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paymentFeesBalance(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>;

    revertPayment(
      _IDrissHash: PromiseOrValue<BytesLike>,
      _assetType: PromiseOrValue<BigNumberish>,
      _assetContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sendToAnyone(
      _IDrissHash: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _assetType: PromiseOrValue<BigNumberish>,
      _assetContractAddress: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IDRISS_ADDR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINIMAL_PAYMENT_FEE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINIMAL_PAYMENT_FEE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAYMENT_FEE_PERCENTAGE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAYMENT_FEE_PERCENTAGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAYMENT_FEE_SLIPPAGE_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      _IDrissHash: PromiseOrValue<BytesLike>,
      _assetType: PromiseOrValue<BigNumberish>,
      _assetContractAddress: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batch(
      _calls: PromiseOrValue<BytesLike>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeMinimalPaymentFee(
      _minimalPaymentFee: PromiseOrValue<BigNumberish>,
      _paymentFeeDenominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changePaymentFeePercentage(
      _paymentFeePercentage: PromiseOrValue<BigNumberish>,
      _paymentFeeDenominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _IDrissHash: PromiseOrValue<string>,
      _claimPassword: PromiseOrValue<string>,
      _assetType: PromiseOrValue<BigNumberish>,
      _assetContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimPaymentFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPaymentFee(
      _value: PromiseOrValue<BigNumberish>,
      _assetType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashIDrissWithPassword(
      _IDrissHash: PromiseOrValue<string>,
      _claimPassword: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moveAssetToOtherHash(
      _FromIDrissHash: PromiseOrValue<BytesLike>,
      _ToIDrissHash: PromiseOrValue<BytesLike>,
      _assetType: PromiseOrValue<BigNumberish>,
      _assetContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>[],
      arg3: PromiseOrValue<BigNumberish>[],
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BigNumberish>,
      arg4: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<BigNumberish>,
      arg3: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentFeesBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revertPayment(
      _IDrissHash: PromiseOrValue<BytesLike>,
      _assetType: PromiseOrValue<BigNumberish>,
      _assetContractAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sendToAnyone(
      _IDrissHash: PromiseOrValue<BytesLike>,
      _amount: PromiseOrValue<BigNumberish>,
      _assetType: PromiseOrValue<BigNumberish>,
      _assetContractAddress: PromiseOrValue<string>,
      _assetId: PromiseOrValue<BigNumberish>,
      _message: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
