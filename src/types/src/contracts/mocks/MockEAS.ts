/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace MockEAS {
  export type AttestationRequestDataStruct = {
    recipient: AddressLike;
    expirationTime: BigNumberish;
    revocable: boolean;
    refUID: BytesLike;
    data: BytesLike;
    value: BigNumberish;
  };

  export type AttestationRequestDataStructOutput = [
    recipient: string,
    expirationTime: bigint,
    revocable: boolean,
    refUID: string,
    data: string,
    value: bigint
  ] & {
    recipient: string;
    expirationTime: bigint;
    revocable: boolean;
    refUID: string;
    data: string;
    value: bigint;
  };

  export type AttestationRequestStruct = {
    schema: BytesLike;
    data: MockEAS.AttestationRequestDataStruct;
  };

  export type AttestationRequestStructOutput = [
    schema: string,
    data: MockEAS.AttestationRequestDataStructOutput
  ] & { schema: string; data: MockEAS.AttestationRequestDataStructOutput };
}

export interface MockEASInterface extends Interface {
  getFunction(nameOrSignature: "attest"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Attested"): EventFragment;

  encodeFunctionData(
    functionFragment: "attest",
    values: [MockEAS.AttestationRequestStruct]
  ): string;

  decodeFunctionResult(functionFragment: "attest", data: BytesLike): Result;
}

export namespace AttestedEvent {
  export type InputTuple = [recipient: AddressLike];
  export type OutputTuple = [recipient: string];
  export interface OutputObject {
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockEAS extends BaseContract {
  address: string;
  connect(runner?: ContractRunner | null): MockEAS;
  waitForDeployment(): Promise<this>;

  interface: MockEASInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  attest: TypedContractMethod<
    [request: MockEAS.AttestationRequestStruct],
    [string],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "attest"
  ): TypedContractMethod<
    [request: MockEAS.AttestationRequestStruct],
    [string],
    "payable"
  >;

  getEvent(
    key: "Attested"
  ): TypedContractEvent<
    AttestedEvent.InputTuple,
    AttestedEvent.OutputTuple,
    AttestedEvent.OutputObject
  >;

  filters: {
    "Attested(address)": TypedContractEvent<
      AttestedEvent.InputTuple,
      AttestedEvent.OutputTuple,
      AttestedEvent.OutputObject
    >;
    Attested: TypedContractEvent<
      AttestedEvent.InputTuple,
      AttestedEvent.OutputTuple,
      AttestedEvent.OutputObject
    >;
  };
}
