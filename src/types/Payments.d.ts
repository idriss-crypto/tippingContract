/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PaymentsInterface extends ethers.utils.Interface {
  functions: {
    "addAdmin(address)": FunctionFragment;
    "addDelegate(address,string)": FunctionFragment;
    "addDelegateException(address,string,uint256)": FunctionFragment;
    "amounts(bytes32)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "contractOwner()": FunctionFragment;
    "delegate(string)": FunctionFragment;
    "deleteAdmin(address)": FunctionFragment;
    "deleteDelegate(string)": FunctionFragment;
    "hashReceipt(string,address)": FunctionFragment;
    "payNative(bytes32,string,string)": FunctionFragment;
    "receipts(bytes32)": FunctionFragment;
    "transferContractOwnership(address)": FunctionFragment;
    "verifyReceipt(string,address)": FunctionFragment;
    "withdraw(uint256,string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addDelegate",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addDelegateException",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "amounts", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "contractOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(functionFragment: "deleteAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deleteDelegate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hashReceipt",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "payNative",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(functionFragment: "receipts", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "transferContractOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyReceipt",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDelegateException",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "amounts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteDelegate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "payNative", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "receipts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferContractOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdminAdded(address)": EventFragment;
    "AdminDeleted(address)": EventFragment;
    "DelegateAdded(string,address)": EventFragment;
    "DelegateDeleted(string,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PaymentDone(address,uint256,bytes32,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentDone"): EventFragment;
}

export type AdminAddedEvent = TypedEvent<[string] & { admin: string }>;

export type AdminDeletedEvent = TypedEvent<[string] & { admin: string }>;

export type DelegateAddedEvent = TypedEvent<
  [string, string] & { delegateHandle: string; delegateAddress: string }
>;

export type DelegateDeletedEvent = TypedEvent<
  [string, string] & { delegateHandle: string; delegateAddress: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PaymentDoneEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber] & {
    payer: string;
    amount: BigNumber;
    paymentId_hash: string;
    IDrissHash: string;
    date: BigNumber;
  }
>;

export class Payments extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PaymentsInterface;

  functions: {
    addAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addDelegate(
      delegateAddress: string,
      delegateHandle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addDelegateException(
      delegateAddress: string,
      delegateHandle: string,
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    amounts(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    contractOwner(overrides?: CallOverrides): Promise<[string]>;

    delegate(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    deleteAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteDelegate(
      delegateHandle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hashReceipt(
      receiptId: string,
      paymAddr: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    payNative(
      paymentId_hash: BytesLike,
      IDrissHash: string,
      delegateHandle: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    receipts(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    transferContractOwnership(
      newOwner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyReceipt(
      receiptId: string,
      paymAddr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    withdraw(
      amount: BigNumberish,
      delegateHandle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAdmin(
    adminAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addDelegate(
    delegateAddress: string,
    delegateHandle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addDelegateException(
    delegateAddress: string,
    delegateHandle: string,
    percentage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  amounts(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  contractOwner(overrides?: CallOverrides): Promise<string>;

  delegate(arg0: string, overrides?: CallOverrides): Promise<string>;

  deleteAdmin(
    adminAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteDelegate(
    delegateHandle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hashReceipt(
    receiptId: string,
    paymAddr: string,
    overrides?: CallOverrides
  ): Promise<string>;

  payNative(
    paymentId_hash: BytesLike,
    IDrissHash: string,
    delegateHandle: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  receipts(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  transferContractOwnership(
    newOwner: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyReceipt(
    receiptId: string,
    paymAddr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  withdraw(
    amount: BigNumberish,
    delegateHandle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAdmin(adminAddress: string, overrides?: CallOverrides): Promise<void>;

    addDelegate(
      delegateAddress: string,
      delegateHandle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addDelegateException(
      delegateAddress: string,
      delegateHandle: string,
      percentage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    amounts(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    contractOwner(overrides?: CallOverrides): Promise<string>;

    delegate(arg0: string, overrides?: CallOverrides): Promise<string>;

    deleteAdmin(adminAddress: string, overrides?: CallOverrides): Promise<void>;

    deleteDelegate(
      delegateHandle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hashReceipt(
      receiptId: string,
      paymAddr: string,
      overrides?: CallOverrides
    ): Promise<string>;

    payNative(
      paymentId_hash: BytesLike,
      IDrissHash: string,
      delegateHandle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    receipts(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    transferContractOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyReceipt(
      receiptId: string,
      paymAddr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdraw(
      amount: BigNumberish,
      delegateHandle: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AdminAdded(address)"(
      admin?: string | null
    ): TypedEventFilter<[string], { admin: string }>;

    AdminAdded(
      admin?: string | null
    ): TypedEventFilter<[string], { admin: string }>;

    "AdminDeleted(address)"(
      admin?: string | null
    ): TypedEventFilter<[string], { admin: string }>;

    AdminDeleted(
      admin?: string | null
    ): TypedEventFilter<[string], { admin: string }>;

    "DelegateAdded(string,address)"(
      delegateHandle?: null,
      delegateAddress?: string | null
    ): TypedEventFilter<
      [string, string],
      { delegateHandle: string; delegateAddress: string }
    >;

    DelegateAdded(
      delegateHandle?: null,
      delegateAddress?: string | null
    ): TypedEventFilter<
      [string, string],
      { delegateHandle: string; delegateAddress: string }
    >;

    "DelegateDeleted(string,address)"(
      delegateHandle?: null,
      delegateAddress?: string | null
    ): TypedEventFilter<
      [string, string],
      { delegateHandle: string; delegateAddress: string }
    >;

    DelegateDeleted(
      delegateHandle?: null,
      delegateAddress?: string | null
    ): TypedEventFilter<
      [string, string],
      { delegateHandle: string; delegateAddress: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PaymentDone(address,uint256,bytes32,string,uint256)"(
      payer?: null,
      amount?: null,
      paymentId_hash?: null,
      IDrissHash?: null,
      date?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        payer: string;
        amount: BigNumber;
        paymentId_hash: string;
        IDrissHash: string;
        date: BigNumber;
      }
    >;

    PaymentDone(
      payer?: null,
      amount?: null,
      paymentId_hash?: null,
      IDrissHash?: null,
      date?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        payer: string;
        amount: BigNumber;
        paymentId_hash: string;
        IDrissHash: string;
        date: BigNumber;
      }
    >;
  };

  estimateGas: {
    addAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addDelegate(
      delegateAddress: string,
      delegateHandle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addDelegateException(
      delegateAddress: string,
      delegateHandle: string,
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    amounts(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    contractOwner(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deleteAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteDelegate(
      delegateHandle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hashReceipt(
      receiptId: string,
      paymAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payNative(
      paymentId_hash: BytesLike,
      IDrissHash: string,
      delegateHandle: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    receipts(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    transferContractOwnership(
      newOwner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyReceipt(
      receiptId: string,
      paymAddr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      delegateHandle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addDelegate(
      delegateAddress: string,
      delegateHandle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addDelegateException(
      delegateAddress: string,
      delegateHandle: string,
      percentage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    amounts(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contractOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegate(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteDelegate(
      delegateHandle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hashReceipt(
      receiptId: string,
      paymAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payNative(
      paymentId_hash: BytesLike,
      IDrissHash: string,
      delegateHandle: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    receipts(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferContractOwnership(
      newOwner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyReceipt(
      receiptId: string,
      paymAddr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      delegateHandle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
