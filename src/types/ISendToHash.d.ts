/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ISendToHashInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(bytes32,uint8,address,uint256)": FunctionFragment;
    "claim(string,string,uint8,address)": FunctionFragment;
    "hashIDrissWithPassword(string,string)": FunctionFragment;
    "moveAssetToOtherHash(bytes32,bytes32,uint8,address)": FunctionFragment;
    "revertPayment(bytes32,uint8,address)": FunctionFragment;
    "sendToAnyone(bytes32,uint256,uint8,address,uint256,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [BytesLike, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hashIDrissWithPassword",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "moveAssetToOtherHash",
    values: [BytesLike, BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revertPayment",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendToAnyone",
    values: [
      BytesLike,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      string
    ]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashIDrissWithPassword",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moveAssetToOtherHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendToAnyone",
    data: BytesLike
  ): Result;

  events: {};
}

export class ISendToHash extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISendToHashInterface;

  functions: {
    balanceOf(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claim(
      _IDrissHash: string,
      _claimPassword: string,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hashIDrissWithPassword(
      _IDrissHash: string,
      _claimPassword: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    moveAssetToOtherHash(
      _FromIDrissHash: BytesLike,
      _ToIDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revertPayment(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendToAnyone(
      _IDrissHash: BytesLike,
      _amount: BigNumberish,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _assetId: BigNumberish,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  balanceOf(
    _IDrissHash: BytesLike,
    _assetType: BigNumberish,
    _assetContractAddress: string,
    _assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claim(
    _IDrissHash: string,
    _claimPassword: string,
    _assetType: BigNumberish,
    _assetContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hashIDrissWithPassword(
    _IDrissHash: string,
    _claimPassword: string,
    overrides?: CallOverrides
  ): Promise<string>;

  moveAssetToOtherHash(
    _FromIDrissHash: BytesLike,
    _ToIDrissHash: BytesLike,
    _assetType: BigNumberish,
    _assetContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revertPayment(
    _IDrissHash: BytesLike,
    _assetType: BigNumberish,
    _assetContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendToAnyone(
    _IDrissHash: BytesLike,
    _amount: BigNumberish,
    _assetType: BigNumberish,
    _assetContractAddress: string,
    _assetId: BigNumberish,
    _message: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    balanceOf(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      _IDrissHash: string,
      _claimPassword: string,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hashIDrissWithPassword(
      _IDrissHash: string,
      _claimPassword: string,
      overrides?: CallOverrides
    ): Promise<string>;

    moveAssetToOtherHash(
      _FromIDrissHash: BytesLike,
      _ToIDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revertPayment(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendToAnyone(
      _IDrissHash: BytesLike,
      _amount: BigNumberish,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _assetId: BigNumberish,
      _message: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    balanceOf(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claim(
      _IDrissHash: string,
      _claimPassword: string,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hashIDrissWithPassword(
      _IDrissHash: string,
      _claimPassword: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moveAssetToOtherHash(
      _FromIDrissHash: BytesLike,
      _ToIDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revertPayment(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendToAnyone(
      _IDrissHash: BytesLike,
      _amount: BigNumberish,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _assetId: BigNumberish,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claim(
      _IDrissHash: string,
      _claimPassword: string,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hashIDrissWithPassword(
      _IDrissHash: string,
      _claimPassword: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moveAssetToOtherHash(
      _FromIDrissHash: BytesLike,
      _ToIDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revertPayment(
      _IDrissHash: BytesLike,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendToAnyone(
      _IDrissHash: BytesLike,
      _amount: BigNumberish,
      _assetType: BigNumberish,
      _assetContractAddress: string,
      _assetId: BigNumberish,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
