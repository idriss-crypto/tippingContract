/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ITippingInterface extends ethers.utils.Interface {
  functions: {
    "addAdmin(address)": FunctionFragment;
    "addPublicGood(address)": FunctionFragment;
    "addSupportedERC20(address)": FunctionFragment;
    "batchSendTo(tuple[])": FunctionFragment;
    "deleteAdmin(address)": FunctionFragment;
    "deletePublicGood(address)": FunctionFragment;
    "deleteSupportedERC20(address)": FunctionFragment;
    "sendERC1155To(address,uint256,uint256,address,string)": FunctionFragment;
    "sendERC20To(address,uint256,address,string)": FunctionFragment;
    "sendERC721To(address,uint256,address,string)": FunctionFragment;
    "sendNativeTo(address,string)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawToken(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addPublicGood",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addSupportedERC20",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSendTo",
    values: [
      {
        assetType: BigNumberish;
        recipient: string;
        amount: BigNumberish;
        tokenId: BigNumberish;
        tokenAddress: string;
        message: string;
      }[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "deleteAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deletePublicGood",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteSupportedERC20",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendERC1155To",
    values: [string, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendERC20To",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendERC721To",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "sendNativeTo",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addPublicGood",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addSupportedERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSendTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deletePublicGood",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteSupportedERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendERC1155To",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendERC20To",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendERC721To",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendNativeTo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {};
}

export class ITipping extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITippingInterface;

  functions: {
    addAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPublicGood(
      publicGoodAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSupportedERC20(
      erc20Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batchSendTo(
      calls: {
        assetType: BigNumberish;
        recipient: string;
        amount: BigNumberish;
        tokenId: BigNumberish;
        tokenAddress: string;
        message: string;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deletePublicGood(
      publicGoodAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteSupportedERC20(
      erc20Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendERC1155To(
      _recipient: string,
      _assetId: BigNumberish,
      _amount: BigNumberish,
      _nftContractAddress: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendERC20To(
      _recipient: string,
      _amount: BigNumberish,
      _tokenContractAddr: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendERC721To(
      _recipient: string,
      _assetId: BigNumberish,
      _nftContractAddress: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendNativeTo(
      _recipient: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      _tokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAdmin(
    _adminAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPublicGood(
    publicGoodAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSupportedERC20(
    erc20Address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batchSendTo(
    calls: {
      assetType: BigNumberish;
      recipient: string;
      amount: BigNumberish;
      tokenId: BigNumberish;
      tokenAddress: string;
      message: string;
    }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteAdmin(
    _adminAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deletePublicGood(
    publicGoodAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteSupportedERC20(
    erc20Address: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendERC1155To(
    _recipient: string,
    _assetId: BigNumberish,
    _amount: BigNumberish,
    _nftContractAddress: string,
    _message: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendERC20To(
    _recipient: string,
    _amount: BigNumberish,
    _tokenContractAddr: string,
    _message: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendERC721To(
    _recipient: string,
    _assetId: BigNumberish,
    _nftContractAddress: string,
    _message: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendNativeTo(
    _recipient: string,
    _message: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    _tokenContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAdmin(_adminAddress: string, overrides?: CallOverrides): Promise<void>;

    addPublicGood(
      publicGoodAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addSupportedERC20(
      erc20Address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    batchSendTo(
      calls: {
        assetType: BigNumberish;
        recipient: string;
        amount: BigNumberish;
        tokenId: BigNumberish;
        tokenAddress: string;
        message: string;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    deleteAdmin(
      _adminAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deletePublicGood(
      publicGoodAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteSupportedERC20(
      erc20Address: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendERC1155To(
      _recipient: string,
      _assetId: BigNumberish,
      _amount: BigNumberish,
      _nftContractAddress: string,
      _message: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendERC20To(
      _recipient: string,
      _amount: BigNumberish,
      _tokenContractAddr: string,
      _message: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendERC721To(
      _recipient: string,
      _assetId: BigNumberish,
      _nftContractAddress: string,
      _message: string,
      overrides?: CallOverrides
    ): Promise<void>;

    sendNativeTo(
      _recipient: string,
      _message: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    withdrawToken(
      _tokenContract: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPublicGood(
      publicGoodAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSupportedERC20(
      erc20Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batchSendTo(
      calls: {
        assetType: BigNumberish;
        recipient: string;
        amount: BigNumberish;
        tokenId: BigNumberish;
        tokenAddress: string;
        message: string;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deletePublicGood(
      publicGoodAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteSupportedERC20(
      erc20Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendERC1155To(
      _recipient: string,
      _assetId: BigNumberish,
      _amount: BigNumberish,
      _nftContractAddress: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendERC20To(
      _recipient: string,
      _amount: BigNumberish,
      _tokenContractAddr: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendERC721To(
      _recipient: string,
      _assetId: BigNumberish,
      _nftContractAddress: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendNativeTo(
      _recipient: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      _tokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPublicGood(
      publicGoodAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSupportedERC20(
      erc20Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batchSendTo(
      calls: {
        assetType: BigNumberish;
        recipient: string;
        amount: BigNumberish;
        tokenId: BigNumberish;
        tokenAddress: string;
        message: string;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteAdmin(
      _adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deletePublicGood(
      publicGoodAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteSupportedERC20(
      erc20Address: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendERC1155To(
      _recipient: string,
      _assetId: BigNumberish,
      _amount: BigNumberish,
      _nftContractAddress: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendERC20To(
      _recipient: string,
      _amount: BigNumberish,
      _tokenContractAddr: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendERC721To(
      _recipient: string,
      _assetId: BigNumberish,
      _nftContractAddress: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendNativeTo(
      _recipient: string,
      _message: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      _tokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
