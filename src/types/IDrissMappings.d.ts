/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IDrissMappingsInterface extends ethers.utils.Interface {
  functions: {
    "IDrissOwners(string)": FunctionFragment;
    "addAdmin(address)": FunctionFragment;
    "addIDriss(string,string,string,address)": FunctionFragment;
    "addIDrissToken(string,string,string,address,uint256,address)": FunctionFragment;
    "contractOwner()": FunctionFragment;
    "countAdding()": FunctionFragment;
    "countDeleting()": FunctionFragment;
    "creationTime()": FunctionFragment;
    "deleteAdmin(address)": FunctionFragment;
    "deleteIDriss(string)": FunctionFragment;
    "getIDriss(string)": FunctionFragment;
    "payDates(string)": FunctionFragment;
    "price()": FunctionFragment;
    "setPrice(uint256)": FunctionFragment;
    "transferContractOwnership(address)": FunctionFragment;
    "transferIDrissOwnership(string,address)": FunctionFragment;
    "withdraw()": FunctionFragment;
    "withdrawTokens(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "IDrissOwners",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "addAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "addIDriss",
    values: [string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addIDrissToken",
    values: [string, string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "contractOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countAdding",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "countDeleting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creationTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "deleteAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deleteIDriss",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getIDriss", values: [string]): string;
  encodeFunctionData(functionFragment: "payDates", values: [string]): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferContractOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferIDrissOwnership",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawTokens",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "IDrissOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addIDriss", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addIDrissToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countAdding",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countDeleting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteIDriss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIDriss", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payDates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferContractOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferIDrissOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokens",
    data: BytesLike
  ): Result;

  events: {
    "AdminAdded(address)": EventFragment;
    "AdminDeleted(address)": EventFragment;
    "Decrement(uint256)": EventFragment;
    "IDrissAdded(string)": EventFragment;
    "IDrissDeleted(string)": EventFragment;
    "IDrissOwnershipTransferred(address,address)": EventFragment;
    "Increment(uint256)": EventFragment;
    "NewPrice(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AdminDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Decrement"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IDrissAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IDrissDeleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IDrissOwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Increment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type AdminAddedEvent = TypedEvent<[string] & { admin: string }>;

export type AdminDeletedEvent = TypedEvent<[string] & { admin: string }>;

export type DecrementEvent = TypedEvent<[BigNumber] & { value: BigNumber }>;

export type IDrissAddedEvent = TypedEvent<[string] & { hash: string }>;

export type IDrissDeletedEvent = TypedEvent<[string] & { hash: string }>;

export type IDrissOwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousIDrissOwner: string; newIDrissOwner: string }
>;

export type IncrementEvent = TypedEvent<[BigNumber] & { value: BigNumber }>;

export type NewPriceEvent = TypedEvent<[BigNumber] & { price: BigNumber }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class IDrissMappings extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IDrissMappingsInterface;

  functions: {
    IDrissOwners(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    addAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addIDriss(
      hashPub: string,
      hashID: string,
      address_: string,
      ownerAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addIDrissToken(
      hashPub: string,
      hashID: string,
      address_: string,
      token: string,
      amount: BigNumberish,
      ownerAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contractOwner(overrides?: CallOverrides): Promise<[string]>;

    countAdding(overrides?: CallOverrides): Promise<[BigNumber]>;

    countDeleting(overrides?: CallOverrides): Promise<[BigNumber]>;

    creationTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    deleteAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteIDriss(
      hashPub: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getIDriss(hashPub: string, overrides?: CallOverrides): Promise<[string]>;

    payDates(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    setPrice(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferContractOwnership(
      newOwner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferIDrissOwnership(
      hashPub: string,
      newOwner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTokens(
      tokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  IDrissOwners(arg0: string, overrides?: CallOverrides): Promise<string>;

  addAdmin(
    adminAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addIDriss(
    hashPub: string,
    hashID: string,
    address_: string,
    ownerAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addIDrissToken(
    hashPub: string,
    hashID: string,
    address_: string,
    token: string,
    amount: BigNumberish,
    ownerAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contractOwner(overrides?: CallOverrides): Promise<string>;

  countAdding(overrides?: CallOverrides): Promise<BigNumber>;

  countDeleting(overrides?: CallOverrides): Promise<BigNumber>;

  creationTime(overrides?: CallOverrides): Promise<BigNumber>;

  deleteAdmin(
    adminAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteIDriss(
    hashPub: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getIDriss(hashPub: string, overrides?: CallOverrides): Promise<string>;

  payDates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  setPrice(
    newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferContractOwnership(
    newOwner: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferIDrissOwnership(
    hashPub: string,
    newOwner: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTokens(
    tokenContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    IDrissOwners(arg0: string, overrides?: CallOverrides): Promise<string>;

    addAdmin(adminAddress: string, overrides?: CallOverrides): Promise<void>;

    addIDriss(
      hashPub: string,
      hashID: string,
      address_: string,
      ownerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addIDrissToken(
      hashPub: string,
      hashID: string,
      address_: string,
      token: string,
      amount: BigNumberish,
      ownerAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    contractOwner(overrides?: CallOverrides): Promise<string>;

    countAdding(overrides?: CallOverrides): Promise<BigNumber>;

    countDeleting(overrides?: CallOverrides): Promise<BigNumber>;

    creationTime(overrides?: CallOverrides): Promise<BigNumber>;

    deleteAdmin(adminAddress: string, overrides?: CallOverrides): Promise<void>;

    deleteIDriss(hashPub: string, overrides?: CallOverrides): Promise<void>;

    getIDriss(hashPub: string, overrides?: CallOverrides): Promise<string>;

    payDates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    setPrice(newPrice: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferContractOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferIDrissOwnership(
      hashPub: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<string>;

    withdrawTokens(
      tokenContract: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminAdded(address)"(
      admin?: string | null
    ): TypedEventFilter<[string], { admin: string }>;

    AdminAdded(
      admin?: string | null
    ): TypedEventFilter<[string], { admin: string }>;

    "AdminDeleted(address)"(
      admin?: string | null
    ): TypedEventFilter<[string], { admin: string }>;

    AdminDeleted(
      admin?: string | null
    ): TypedEventFilter<[string], { admin: string }>;

    "Decrement(uint256)"(
      value?: null
    ): TypedEventFilter<[BigNumber], { value: BigNumber }>;

    Decrement(
      value?: null
    ): TypedEventFilter<[BigNumber], { value: BigNumber }>;

    "IDrissAdded(string)"(
      hash?: string | null
    ): TypedEventFilter<[string], { hash: string }>;

    IDrissAdded(
      hash?: string | null
    ): TypedEventFilter<[string], { hash: string }>;

    "IDrissDeleted(string)"(
      hash?: string | null
    ): TypedEventFilter<[string], { hash: string }>;

    IDrissDeleted(
      hash?: string | null
    ): TypedEventFilter<[string], { hash: string }>;

    "IDrissOwnershipTransferred(address,address)"(
      previousIDrissOwner?: string | null,
      newIDrissOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousIDrissOwner: string; newIDrissOwner: string }
    >;

    IDrissOwnershipTransferred(
      previousIDrissOwner?: string | null,
      newIDrissOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousIDrissOwner: string; newIDrissOwner: string }
    >;

    "Increment(uint256)"(
      value?: null
    ): TypedEventFilter<[BigNumber], { value: BigNumber }>;

    Increment(
      value?: null
    ): TypedEventFilter<[BigNumber], { value: BigNumber }>;

    "NewPrice(uint256)"(
      price?: null
    ): TypedEventFilter<[BigNumber], { price: BigNumber }>;

    NewPrice(price?: null): TypedEventFilter<[BigNumber], { price: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    IDrissOwners(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    addAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addIDriss(
      hashPub: string,
      hashID: string,
      address_: string,
      ownerAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addIDrissToken(
      hashPub: string,
      hashID: string,
      address_: string,
      token: string,
      amount: BigNumberish,
      ownerAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contractOwner(overrides?: CallOverrides): Promise<BigNumber>;

    countAdding(overrides?: CallOverrides): Promise<BigNumber>;

    countDeleting(overrides?: CallOverrides): Promise<BigNumber>;

    creationTime(overrides?: CallOverrides): Promise<BigNumber>;

    deleteAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteIDriss(
      hashPub: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getIDriss(hashPub: string, overrides?: CallOverrides): Promise<BigNumber>;

    payDates(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    setPrice(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferContractOwnership(
      newOwner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferIDrissOwnership(
      hashPub: string,
      newOwner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTokens(
      tokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    IDrissOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addIDriss(
      hashPub: string,
      hashID: string,
      address_: string,
      ownerAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addIDrissToken(
      hashPub: string,
      hashID: string,
      address_: string,
      token: string,
      amount: BigNumberish,
      ownerAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contractOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    countAdding(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    countDeleting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creationTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deleteAdmin(
      adminAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteIDriss(
      hashPub: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getIDriss(
      hashPub: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    payDates(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setPrice(
      newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferContractOwnership(
      newOwner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferIDrissOwnership(
      hashPub: string,
      newOwner: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTokens(
      tokenContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
