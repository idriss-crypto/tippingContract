/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type { ISendToHash, ISendToHashInterface } from "../ISendToHash";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_IDrissHash",
        type: "bytes32",
      },
      {
        internalType: "enum AssetType",
        name: "_assetType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "_assetContractAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_assetId",
        type: "uint256",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_IDrissHash",
        type: "string",
      },
      {
        internalType: "string",
        name: "_claimPassword",
        type: "string",
      },
      {
        internalType: "enum AssetType",
        name: "_assetType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "_assetContractAddress",
        type: "address",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_IDrissHash",
        type: "string",
      },
      {
        internalType: "string",
        name: "_claimPassword",
        type: "string",
      },
    ],
    name: "hashIDrissWithPassword",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_FromIDrissHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "_ToIDrissHash",
        type: "bytes32",
      },
      {
        internalType: "enum AssetType",
        name: "_assetType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "_assetContractAddress",
        type: "address",
      },
    ],
    name: "moveAssetToOtherHash",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_IDrissHash",
        type: "bytes32",
      },
      {
        internalType: "enum AssetType",
        name: "_assetType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "_assetContractAddress",
        type: "address",
      },
    ],
    name: "revertPayment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_IDrissHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "enum AssetType",
        name: "_assetType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "_assetContractAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_assetId",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "_message",
        type: "string",
      },
    ],
    name: "sendToAnyone",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

export class ISendToHash__factory {
  static readonly abi = _abi;
  static createInterface(): ISendToHashInterface {
    return new utils.Interface(_abi) as ISendToHashInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ISendToHash {
    return new Contract(address, _abi, signerOrProvider) as ISendToHash;
  }
}
