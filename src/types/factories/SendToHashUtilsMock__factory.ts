/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SendToHashUtilsMock,
  SendToHashUtilsMockInterface,
} from "../SendToHashUtilsMock";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "c",
        type: "uint8",
      },
    ],
    name: "fromHexChar",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_IDrissHash",
        type: "string",
      },
      {
        internalType: "string",
        name: "_password",
        type: "string",
      },
    ],
    name: "hashIDrissWithPassword",
    outputs: [
      {
        internalType: "bytes32",
        name: "_hash",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "s",
        type: "string",
      },
    ],
    name: "safeHexStringToAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610689806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80632ecb20d314610046578063d4a07a9514610070578063e4ad60c414610091575b600080fd5b6100596100543660046103ba565b6100bc565b60405160ff90911681526020015b60405180910390f35b61008361007e366004610487565b6100cd565b604051908152602001610067565b6100a461009f3660046104eb565b610100565b6040516001600160a01b039091168152602001610067565b60006100c78261010b565b92915050565b600082826040516020016100e2929190610558565b60405160208183030381529060405280519060200120905092915050565b60006100c782610248565b6000600360fc1b60f883901b6001600160f81b031916108015906101415750603960f81b60f883901b6001600160f81b03191611155b15610151576100c7603083610583565b606160f81b60f883901b6001600160f81b031916108015906101855750603360f91b60f883901b6001600160f81b03191611155b156101a157606161019783600a61059c565b6100c79190610583565b604160f81b60f883901b6001600160f81b031916108015906101d55750602360f91b60f883901b6001600160f81b03191611155b156101e757604161019783600a61059c565b60405162461bcd60e51b815260206004820152602b60248201527f556e706172736561626c65206865782063686172616374657220666f756e642060448201526a34b71030b2323932b9b99760a91b60648201526084015b60405180910390fd5b80516000908290602a1461029e5760405162461bcd60e51b815260206004820152601960248201527f41646472657373206c656e67746820697320696e76616c696400000000000000604482015260640161023f565b6000600282516102ae91906105b5565b67ffffffffffffffff8111156102c6576102c66103e4565b6040519080825280601f01601f1916602001820160405280156102f0576020820181803683370190505b509050600060015b6002845161030691906105b5565b8110156103a6576103448461031c8360026105d7565b6103279060016105ee565b8151811061033757610337610601565b016020015160f81c61010b565b610353856103278460026105d7565b61035e906010610617565b610368919061059c565b60f81b83828151811061037d5761037d610601565b60200101906001600160f81b031916908160001a9053508061039e8161063a565b9150506102f8565b505060210151600160601b90049392505050565b6000602082840312156103cc57600080fd5b813560ff811681146103dd57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261040b57600080fd5b813567ffffffffffffffff80821115610426576104266103e4565b604051601f8301601f19908116603f0116810190828211818310171561044e5761044e6103e4565b8160405283815286602085880101111561046757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561049a57600080fd5b823567ffffffffffffffff808211156104b257600080fd5b6104be868387016103fa565b935060208501359150808211156104d457600080fd5b506104e1858286016103fa565b9150509250929050565b6000602082840312156104fd57600080fd5b813567ffffffffffffffff81111561051457600080fd5b610520848285016103fa565b949350505050565b6000815160005b81811015610549576020818501810151868301520161052f565b50600093019283525090919050565b60006105206105678386610528565b84610528565b634e487b7160e01b600052601160045260246000fd5b60ff82811682821603908111156100c7576100c761056d565b60ff81811683821601908111156100c7576100c761056d565b6000826105d257634e487b7160e01b600052601260045260246000fd5b500490565b80820281158282048414176100c7576100c761056d565b808201808211156100c7576100c761056d565b634e487b7160e01b600052603260045260246000fd5b60ff81811683821602908116908181146106335761063361056d565b5092915050565b60006001820161064c5761064c61056d565b506001019056fea26469706673582212206b6a05857983bc7775886e4437e4b8611378891313f7a066e0acdbc12c4e9e3a64736f6c63430008130033";

export class SendToHashUtilsMock__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SendToHashUtilsMock> {
    return super.deploy(overrides || {}) as Promise<SendToHashUtilsMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SendToHashUtilsMock {
    return super.attach(address) as SendToHashUtilsMock;
  }
  connect(signer: Signer): SendToHashUtilsMock__factory {
    return super.connect(signer) as SendToHashUtilsMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SendToHashUtilsMockInterface {
    return new utils.Interface(_abi) as SendToHashUtilsMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SendToHashUtilsMock {
    return new Contract(address, _abi, signerOrProvider) as SendToHashUtilsMock;
  }
}
