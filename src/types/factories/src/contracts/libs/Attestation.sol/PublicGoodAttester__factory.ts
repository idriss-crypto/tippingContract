/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BytesLike,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  PublicGoodAttester,
  PublicGoodAttesterInterface,
} from "../../../../../src/contracts/libs/Attestation.sol/PublicGoodAttester";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "eas",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "easSchema",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidEAS",
    type: "error",
  },
  {
    inputs: [],
    name: "EAS_SCHEMA",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161016038038061016083398101604081905261002f9161006c565b6001600160a01b038216610056576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b0390911660805260a0526100a6565b6000806040838503121561007f57600080fd5b82516001600160a01b038116811461009657600080fd5b6020939093015192949293505050565b60805160a051609b6100c560003960006031015260005050609b6000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806325705f8b14602d575b600080fd5b60537f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200160405180910390f3fea2646970667358221220f645f6ecd034c14a9af14020c33f83198e82cf83ed84bdd8389b68d98f4619f664736f6c63430008130033";

type PublicGoodAttesterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PublicGoodAttesterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PublicGoodAttester__factory extends ContractFactory {
  constructor(...args: PublicGoodAttesterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    eas: AddressLike,
    easSchema: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(eas, easSchema, overrides || {});
  }
  override deploy(
    eas: AddressLike,
    easSchema: BytesLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(eas, easSchema, overrides || {}) as Promise<
      PublicGoodAttester & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): PublicGoodAttester__factory {
    return super.connect(runner) as PublicGoodAttester__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PublicGoodAttesterInterface {
    return new Interface(_abi) as PublicGoodAttesterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): PublicGoodAttester {
    return new Contract(address, _abi, runner) as unknown as PublicGoodAttester;
  }
}
