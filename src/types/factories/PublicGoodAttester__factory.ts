/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BytesLike,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PublicGoodAttester,
  PublicGoodAttesterInterface,
} from "../PublicGoodAttester";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "eas",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "easSchema",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "InvalidEAS",
    type: "error",
  },
  {
    inputs: [],
    name: "EAS_SCHEMA",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161016038038061016083398101604081905261002f9161006c565b6001600160a01b038216610056576040516341bc07ff60e11b815260040160405180910390fd5b6001600160a01b0390911660805260a0526100a6565b6000806040838503121561007f57600080fd5b82516001600160a01b038116811461009657600080fd5b6020939093015192949293505050565b60805160a051609b6100c560003960006031015260005050609b6000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806325705f8b14602d575b600080fd5b60537f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200160405180910390f3fea2646970667358221220f645f6ecd034c14a9af14020c33f83198e82cf83ed84bdd8389b68d98f4619f664736f6c63430008130033";

export class PublicGoodAttester__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    eas: string,
    easSchema: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PublicGoodAttester> {
    return super.deploy(
      eas,
      easSchema,
      overrides || {}
    ) as Promise<PublicGoodAttester>;
  }
  getDeployTransaction(
    eas: string,
    easSchema: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(eas, easSchema, overrides || {});
  }
  attach(address: string): PublicGoodAttester {
    return super.attach(address) as PublicGoodAttester;
  }
  connect(signer: Signer): PublicGoodAttester__factory {
    return super.connect(signer) as PublicGoodAttester__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PublicGoodAttesterInterface {
    return new utils.Interface(_abi) as PublicGoodAttesterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PublicGoodAttester {
    return new Contract(address, _abi, signerOrProvider) as PublicGoodAttester;
  }
}
