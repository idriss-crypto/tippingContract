/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IEASInterface extends ethers.utils.Interface {
  functions: {
    "attest((bytes32,(address,uint64,bool,bytes32,bytes,uint256)))": FunctionFragment;
    "attestByDelegation((bytes32,(address,uint64,bool,bytes32,bytes,uint256),(uint8,bytes32,bytes32),address))": FunctionFragment;
    "getAttestation(bytes32)": FunctionFragment;
    "getRevokeOffchain(address,bytes32)": FunctionFragment;
    "getSchemaRegistry()": FunctionFragment;
    "getTimestamp(bytes32)": FunctionFragment;
    "isAttestationValid(bytes32)": FunctionFragment;
    "multiAttest(tuple[])": FunctionFragment;
    "multiAttestByDelegation(tuple[])": FunctionFragment;
    "multiRevoke(tuple[])": FunctionFragment;
    "multiRevokeByDelegation(tuple[])": FunctionFragment;
    "multiRevokeOffchain(bytes32[])": FunctionFragment;
    "multiTimestamp(bytes32[])": FunctionFragment;
    "revoke((bytes32,(bytes32,uint256)))": FunctionFragment;
    "revokeByDelegation((bytes32,(bytes32,uint256),(uint8,bytes32,bytes32),address))": FunctionFragment;
    "revokeOffchain(bytes32)": FunctionFragment;
    "timestamp(bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "attest",
    values: [
      {
        schema: BytesLike;
        data: {
          recipient: string;
          expirationTime: BigNumberish;
          revocable: boolean;
          refUID: BytesLike;
          data: BytesLike;
          value: BigNumberish;
        };
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "attestByDelegation",
    values: [
      {
        schema: BytesLike;
        data: {
          recipient: string;
          expirationTime: BigNumberish;
          revocable: boolean;
          refUID: BytesLike;
          data: BytesLike;
          value: BigNumberish;
        };
        signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        attester: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttestation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRevokeOffchain",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSchemaRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTimestamp",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAttestationValid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "multiAttest",
    values: [
      {
        schema: BytesLike;
        data: {
          recipient: string;
          expirationTime: BigNumberish;
          revocable: boolean;
          refUID: BytesLike;
          data: BytesLike;
          value: BigNumberish;
        }[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiAttestByDelegation",
    values: [
      {
        schema: BytesLike;
        data: {
          recipient: string;
          expirationTime: BigNumberish;
          revocable: boolean;
          refUID: BytesLike;
          data: BytesLike;
          value: BigNumberish;
        }[];
        signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[];
        attester: string;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiRevoke",
    values: [
      { schema: BytesLike; data: { uid: BytesLike; value: BigNumberish }[] }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiRevokeByDelegation",
    values: [
      {
        schema: BytesLike;
        data: { uid: BytesLike; value: BigNumberish }[];
        signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[];
        revoker: string;
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "multiRevokeOffchain",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multiTimestamp",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [
      { schema: BytesLike; data: { uid: BytesLike; value: BigNumberish } }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeByDelegation",
    values: [
      {
        schema: BytesLike;
        data: { uid: BytesLike; value: BigNumberish };
        signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        revoker: string;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOffchain",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "timestamp",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "attest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "attestByDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRevokeOffchain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSchemaRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAttestationValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiAttest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiAttestByDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiRevoke",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiRevokeByDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiRevokeOffchain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "multiTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeByDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOffchain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timestamp", data: BytesLike): Result;

  events: {
    "Attested(address,address,bytes32,bytes32)": EventFragment;
    "Revoked(address,address,bytes32,bytes32)": EventFragment;
    "RevokedOffchain(address,bytes32,uint64)": EventFragment;
    "Timestamped(bytes32,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Attested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Revoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokedOffchain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Timestamped"): EventFragment;
}

export type AttestedEvent = TypedEvent<
  [string, string, string, string] & {
    recipient: string;
    attester: string;
    uid: string;
    schema: string;
  }
>;

export type RevokedEvent = TypedEvent<
  [string, string, string, string] & {
    recipient: string;
    attester: string;
    uid: string;
    schema: string;
  }
>;

export type RevokedOffchainEvent = TypedEvent<
  [string, string, BigNumber] & {
    revoker: string;
    data: string;
    timestamp: BigNumber;
  }
>;

export type TimestampedEvent = TypedEvent<
  [string, BigNumber] & { data: string; timestamp: BigNumber }
>;

export class IEAS extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IEASInterface;

  functions: {
    attest(
      request: {
        schema: BytesLike;
        data: {
          recipient: string;
          expirationTime: BigNumberish;
          revocable: boolean;
          refUID: BytesLike;
          data: BytesLike;
          value: BigNumberish;
        };
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    attestByDelegation(
      delegatedRequest: {
        schema: BytesLike;
        data: {
          recipient: string;
          expirationTime: BigNumberish;
          revocable: boolean;
          refUID: BytesLike;
          data: BytesLike;
          value: BigNumberish;
        };
        signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        attester: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAttestation(
      uid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          BigNumber,
          BigNumber,
          BigNumber,
          string,
          string,
          string,
          boolean,
          string
        ] & {
          uid: string;
          schema: string;
          time: BigNumber;
          expirationTime: BigNumber;
          revocationTime: BigNumber;
          refUID: string;
          recipient: string;
          attester: string;
          revocable: boolean;
          data: string;
        }
      ]
    >;

    getRevokeOffchain(
      revoker: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSchemaRegistry(overrides?: CallOverrides): Promise<[string]>;

    getTimestamp(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isAttestationValid(
      uid: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    multiAttest(
      multiRequests: {
        schema: BytesLike;
        data: {
          recipient: string;
          expirationTime: BigNumberish;
          revocable: boolean;
          refUID: BytesLike;
          data: BytesLike;
          value: BigNumberish;
        }[];
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiAttestByDelegation(
      multiDelegatedRequests: {
        schema: BytesLike;
        data: {
          recipient: string;
          expirationTime: BigNumberish;
          revocable: boolean;
          refUID: BytesLike;
          data: BytesLike;
          value: BigNumberish;
        }[];
        signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[];
        attester: string;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiRevoke(
      multiRequests: {
        schema: BytesLike;
        data: { uid: BytesLike; value: BigNumberish }[];
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiRevokeByDelegation(
      multiDelegatedRequests: {
        schema: BytesLike;
        data: { uid: BytesLike; value: BigNumberish }[];
        signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[];
        revoker: string;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiRevokeOffchain(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    multiTimestamp(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revoke(
      request: {
        schema: BytesLike;
        data: { uid: BytesLike; value: BigNumberish };
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeByDelegation(
      delegatedRequest: {
        schema: BytesLike;
        data: { uid: BytesLike; value: BigNumberish };
        signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        revoker: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeOffchain(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timestamp(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  attest(
    request: {
      schema: BytesLike;
      data: {
        recipient: string;
        expirationTime: BigNumberish;
        revocable: boolean;
        refUID: BytesLike;
        data: BytesLike;
        value: BigNumberish;
      };
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  attestByDelegation(
    delegatedRequest: {
      schema: BytesLike;
      data: {
        recipient: string;
        expirationTime: BigNumberish;
        revocable: boolean;
        refUID: BytesLike;
        data: BytesLike;
        value: BigNumberish;
      };
      signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
      attester: string;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAttestation(
    uid: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      boolean,
      string
    ] & {
      uid: string;
      schema: string;
      time: BigNumber;
      expirationTime: BigNumber;
      revocationTime: BigNumber;
      refUID: string;
      recipient: string;
      attester: string;
      revocable: boolean;
      data: string;
    }
  >;

  getRevokeOffchain(
    revoker: string,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSchemaRegistry(overrides?: CallOverrides): Promise<string>;

  getTimestamp(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  isAttestationValid(
    uid: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  multiAttest(
    multiRequests: {
      schema: BytesLike;
      data: {
        recipient: string;
        expirationTime: BigNumberish;
        revocable: boolean;
        refUID: BytesLike;
        data: BytesLike;
        value: BigNumberish;
      }[];
    }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiAttestByDelegation(
    multiDelegatedRequests: {
      schema: BytesLike;
      data: {
        recipient: string;
        expirationTime: BigNumberish;
        revocable: boolean;
        refUID: BytesLike;
        data: BytesLike;
        value: BigNumberish;
      }[];
      signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[];
      attester: string;
    }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiRevoke(
    multiRequests: {
      schema: BytesLike;
      data: { uid: BytesLike; value: BigNumberish }[];
    }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiRevokeByDelegation(
    multiDelegatedRequests: {
      schema: BytesLike;
      data: { uid: BytesLike; value: BigNumberish }[];
      signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[];
      revoker: string;
    }[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiRevokeOffchain(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  multiTimestamp(
    data: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revoke(
    request: {
      schema: BytesLike;
      data: { uid: BytesLike; value: BigNumberish };
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeByDelegation(
    delegatedRequest: {
      schema: BytesLike;
      data: { uid: BytesLike; value: BigNumberish };
      signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
      revoker: string;
    },
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeOffchain(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timestamp(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    attest(
      request: {
        schema: BytesLike;
        data: {
          recipient: string;
          expirationTime: BigNumberish;
          revocable: boolean;
          refUID: BytesLike;
          data: BytesLike;
          value: BigNumberish;
        };
      },
      overrides?: CallOverrides
    ): Promise<string>;

    attestByDelegation(
      delegatedRequest: {
        schema: BytesLike;
        data: {
          recipient: string;
          expirationTime: BigNumberish;
          revocable: boolean;
          refUID: BytesLike;
          data: BytesLike;
          value: BigNumberish;
        };
        signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        attester: string;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    getAttestation(
      uid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        boolean,
        string
      ] & {
        uid: string;
        schema: string;
        time: BigNumber;
        expirationTime: BigNumber;
        revocationTime: BigNumber;
        refUID: string;
        recipient: string;
        attester: string;
        revocable: boolean;
        data: string;
      }
    >;

    getRevokeOffchain(
      revoker: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSchemaRegistry(overrides?: CallOverrides): Promise<string>;

    getTimestamp(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAttestationValid(
      uid: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multiAttest(
      multiRequests: {
        schema: BytesLike;
        data: {
          recipient: string;
          expirationTime: BigNumberish;
          revocable: boolean;
          refUID: BytesLike;
          data: BytesLike;
          value: BigNumberish;
        }[];
      }[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    multiAttestByDelegation(
      multiDelegatedRequests: {
        schema: BytesLike;
        data: {
          recipient: string;
          expirationTime: BigNumberish;
          revocable: boolean;
          refUID: BytesLike;
          data: BytesLike;
          value: BigNumberish;
        }[];
        signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[];
        attester: string;
      }[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    multiRevoke(
      multiRequests: {
        schema: BytesLike;
        data: { uid: BytesLike; value: BigNumberish }[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    multiRevokeByDelegation(
      multiDelegatedRequests: {
        schema: BytesLike;
        data: { uid: BytesLike; value: BigNumberish }[];
        signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[];
        revoker: string;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    multiRevokeOffchain(
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiTimestamp(
      data: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revoke(
      request: {
        schema: BytesLike;
        data: { uid: BytesLike; value: BigNumberish };
      },
      overrides?: CallOverrides
    ): Promise<void>;

    revokeByDelegation(
      delegatedRequest: {
        schema: BytesLike;
        data: { uid: BytesLike; value: BigNumberish };
        signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        revoker: string;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    revokeOffchain(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timestamp(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Attested(address,address,bytes32,bytes32)"(
      recipient?: string | null,
      attester?: string | null,
      uid?: null,
      schema?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string, string],
      { recipient: string; attester: string; uid: string; schema: string }
    >;

    Attested(
      recipient?: string | null,
      attester?: string | null,
      uid?: null,
      schema?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string, string],
      { recipient: string; attester: string; uid: string; schema: string }
    >;

    "Revoked(address,address,bytes32,bytes32)"(
      recipient?: string | null,
      attester?: string | null,
      uid?: null,
      schema?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string, string],
      { recipient: string; attester: string; uid: string; schema: string }
    >;

    Revoked(
      recipient?: string | null,
      attester?: string | null,
      uid?: null,
      schema?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string, string],
      { recipient: string; attester: string; uid: string; schema: string }
    >;

    "RevokedOffchain(address,bytes32,uint64)"(
      revoker?: string | null,
      data?: BytesLike | null,
      timestamp?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { revoker: string; data: string; timestamp: BigNumber }
    >;

    RevokedOffchain(
      revoker?: string | null,
      data?: BytesLike | null,
      timestamp?: BigNumberish | null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { revoker: string; data: string; timestamp: BigNumber }
    >;

    "Timestamped(bytes32,uint64)"(
      data?: BytesLike | null,
      timestamp?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { data: string; timestamp: BigNumber }
    >;

    Timestamped(
      data?: BytesLike | null,
      timestamp?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { data: string; timestamp: BigNumber }
    >;
  };

  estimateGas: {
    attest(
      request: {
        schema: BytesLike;
        data: {
          recipient: string;
          expirationTime: BigNumberish;
          revocable: boolean;
          refUID: BytesLike;
          data: BytesLike;
          value: BigNumberish;
        };
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    attestByDelegation(
      delegatedRequest: {
        schema: BytesLike;
        data: {
          recipient: string;
          expirationTime: BigNumberish;
          revocable: boolean;
          refUID: BytesLike;
          data: BytesLike;
          value: BigNumberish;
        };
        signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        attester: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAttestation(
      uid: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRevokeOffchain(
      revoker: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSchemaRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getTimestamp(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAttestationValid(
      uid: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multiAttest(
      multiRequests: {
        schema: BytesLike;
        data: {
          recipient: string;
          expirationTime: BigNumberish;
          revocable: boolean;
          refUID: BytesLike;
          data: BytesLike;
          value: BigNumberish;
        }[];
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiAttestByDelegation(
      multiDelegatedRequests: {
        schema: BytesLike;
        data: {
          recipient: string;
          expirationTime: BigNumberish;
          revocable: boolean;
          refUID: BytesLike;
          data: BytesLike;
          value: BigNumberish;
        }[];
        signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[];
        attester: string;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiRevoke(
      multiRequests: {
        schema: BytesLike;
        data: { uid: BytesLike; value: BigNumberish }[];
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiRevokeByDelegation(
      multiDelegatedRequests: {
        schema: BytesLike;
        data: { uid: BytesLike; value: BigNumberish }[];
        signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[];
        revoker: string;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiRevokeOffchain(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    multiTimestamp(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revoke(
      request: {
        schema: BytesLike;
        data: { uid: BytesLike; value: BigNumberish };
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeByDelegation(
      delegatedRequest: {
        schema: BytesLike;
        data: { uid: BytesLike; value: BigNumberish };
        signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        revoker: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeOffchain(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timestamp(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    attest(
      request: {
        schema: BytesLike;
        data: {
          recipient: string;
          expirationTime: BigNumberish;
          revocable: boolean;
          refUID: BytesLike;
          data: BytesLike;
          value: BigNumberish;
        };
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    attestByDelegation(
      delegatedRequest: {
        schema: BytesLike;
        data: {
          recipient: string;
          expirationTime: BigNumberish;
          revocable: boolean;
          refUID: BytesLike;
          data: BytesLike;
          value: BigNumberish;
        };
        signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        attester: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAttestation(
      uid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRevokeOffchain(
      revoker: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSchemaRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTimestamp(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAttestationValid(
      uid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multiAttest(
      multiRequests: {
        schema: BytesLike;
        data: {
          recipient: string;
          expirationTime: BigNumberish;
          revocable: boolean;
          refUID: BytesLike;
          data: BytesLike;
          value: BigNumberish;
        }[];
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiAttestByDelegation(
      multiDelegatedRequests: {
        schema: BytesLike;
        data: {
          recipient: string;
          expirationTime: BigNumberish;
          revocable: boolean;
          refUID: BytesLike;
          data: BytesLike;
          value: BigNumberish;
        }[];
        signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[];
        attester: string;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiRevoke(
      multiRequests: {
        schema: BytesLike;
        data: { uid: BytesLike; value: BigNumberish }[];
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiRevokeByDelegation(
      multiDelegatedRequests: {
        schema: BytesLike;
        data: { uid: BytesLike; value: BigNumberish }[];
        signatures: { v: BigNumberish; r: BytesLike; s: BytesLike }[];
        revoker: string;
      }[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiRevokeOffchain(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    multiTimestamp(
      data: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revoke(
      request: {
        schema: BytesLike;
        data: { uid: BytesLike; value: BigNumberish };
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeByDelegation(
      delegatedRequest: {
        schema: BytesLike;
        data: { uid: BytesLike; value: BigNumberish };
        signature: { v: BigNumberish; r: BytesLike; s: BytesLike };
        revoker: string;
      },
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeOffchain(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timestamp(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
